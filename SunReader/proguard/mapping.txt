org.amse.ys.zip.Decompressor -> org.a.a.a.a:
    java.util.Queue ourDeflators -> a
    int read(byte[],int,int) -> a
    int read() -> a
    void storeDecompressor(org.amse.ys.zip.Decompressor) -> a
    org.amse.ys.zip.Decompressor init(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> a
    int available() -> b
org.amse.ys.zip.DeflatingDecompressor -> org.a.a.a.b:
    org.amse.ys.zip.MyBufferedInputStream myStream -> a
    int myCompressedAvailable -> b
    int myAvailable -> c
    byte[] myInBuffer -> d
    int myInBufferOffset -> e
    int myInBufferLength -> f
    byte[] myOutBuffer -> g
    int myOutBufferOffset -> h
    int myOutBufferLength -> i
    int myInflatorId -> j
    void reset(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> b
    int available() -> b
    int read(byte[],int,int) -> a
    int read() -> a
    void fillOutBuffer() -> c
    int startInflating() -> d
    void endInflating(int) -> a
    long inflate(int,byte[],int,int,byte[]) -> a
org.amse.ys.zip.LocalFileHeader -> org.a.a.a.c:
    int Signature -> a
    int Flags -> b
    int CompressionMethod -> c
    int CompressedSize -> d
    int UncompressedSize -> e
    int NameLength -> f
    int ExtraLength -> g
    java.lang.String FileName -> h
    int DataOffset -> i
    java.lang.String htmlDirectoryPrefix(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String archiveEntryName(java.lang.String) -> a
    boolean isHexDigit(char) -> a
    java.lang.String decodeHtmlReference(java.lang.String) -> b
    java.lang.String url(java.lang.String,java.lang.String) -> a
    boolean hasParameter(java.lang.String,java.lang.String) -> b
    java.lang.String appendParameter(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String hostFromUrl(java.lang.String) -> c
org.amse.ys.zip.MyBufferedInputStream -> org.a.a.a.d:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.io.InputStream myFileInputStream -> b
    byte[] myBuffer -> c
    int myBytesReady -> d
    int myPositionInBuffer -> e
    int myCurrentPosition -> f
    int available() -> available
    int offset() -> a
    int read(byte[],int,int) -> read
    int read() -> read
    int read2Bytes() -> b
    int read4Bytes() -> c
    java.lang.String readString(int) -> a
    long skip(long) -> skip
    void backSkip(int) -> b
    void setPosition(int) -> c
    void close() -> close
org.amse.ys.zip.NoCompressionDecompressor -> org.a.a.a.e:
    org.amse.ys.zip.LocalFileHeader myHeader -> a
    org.amse.ys.zip.MyBufferedInputStream myStream -> b
    int myCurrentPosition -> c
    int read(byte[],int,int) -> a
    int read() -> a
    int available() -> b
org.amse.ys.zip.ZipException -> org.a.a.a.f:
org.amse.ys.zip.ZipFile -> org.a.a.a.g:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.util.LinkedHashMap myFileHeaders -> b
    boolean myAllFilesAreRead -> c
    java.util.Queue myStoredStreams -> d
    java.util.Collection headers() -> a
    boolean readFileHeader(org.amse.ys.zip.MyBufferedInputStream,java.lang.String) -> a
    void storeBaseStream(org.amse.ys.zip.MyBufferedInputStream) -> a
    org.amse.ys.zip.MyBufferedInputStream getBaseStream() -> b
    boolean entryExists(java.lang.String) -> a
    int getEntrySize(java.lang.String) -> b
    java.io.InputStream getInputStream(java.lang.String) -> c
    org.amse.ys.zip.LocalFileHeader getHeader(java.lang.String) -> d
org.amse.ys.zip.ZipFile$1 -> org.a.a.a.h:
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.amse.ys.zip.ZipFile$InputStreamHolder -> org.a.a.a.i:
    java.io.InputStream getInputStream() -> a
org.amse.ys.zip.ZipInputStream -> org.a.a.a.j:
    org.amse.ys.zip.ZipFile myParent -> a
    org.amse.ys.zip.MyBufferedInputStream myBaseStream -> b
    org.amse.ys.zip.Decompressor myDecompressor -> c
    boolean myIsClosed -> d
    int available() -> available
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
    void finalize() -> finalize
org.geometerplus.android.fbreader.AddBookmarksAction -> org.geometerplus.android.fbreader.a:
org.geometerplus.android.fbreader.BookmarkAddActivity -> org.geometerplus.android.fbreader.BookmarkAddActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.BookmarkEditActivity -> org.geometerplus.android.fbreader.BookmarkEditActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.BookmarksActivity -> org.geometerplus.android.fbreader.BookmarksActivity:
    org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter myAdapter -> a
    java.util.List AllBooksBookmarks -> b
    java.util.List myThisBookBookmarks -> c
    java.util.List mySearchResults -> d
    android.widget.ListView myThisBookView -> e
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> f
    org.geometerplus.zlibrary.core.options.ZLStringOption myBookmarkSearchPatternOption -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void invalidateAllViews() -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void backToMain(android.view.View) -> backToMain
    org.geometerplus.zlibrary.core.resources.ZLResource access$0(org.geometerplus.android.fbreader.BookmarksActivity) -> a
    void access$1(org.geometerplus.android.fbreader.BookmarksActivity,org.geometerplus.fbreader.library.Bookmark) -> a
    void access$2(org.geometerplus.android.fbreader.BookmarksActivity) -> b
org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter -> org.geometerplus.android.fbreader.b:
    java.util.List myBookmarks -> a
    boolean myCurrentBook -> b
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> c
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    org.geometerplus.fbreader.library.Bookmark getItem(int) -> a
    int getCount() -> getCount
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.ButtonsPopupPanel -> org.geometerplus.android.fbreader.c:
    java.util.ArrayList myButtons -> d
    void addButton(java.lang.String,boolean,int) -> a
    void update() -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.ButtonsPopupPanel$ActionButton -> org.geometerplus.android.fbreader.d:
    java.lang.String ActionId -> a
    boolean IsCloseButton -> b
org.geometerplus.android.fbreader.CancelActivity -> org.geometerplus.android.fbreader.CancelActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.CancelActivity$ActionListAdapter -> org.geometerplus.android.fbreader.e:
    android.content.Intent myIntent -> a
    org.geometerplus.android.fbreader.CancelActivity this$0 -> b
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.DictionaryUtil -> org.geometerplus.android.fbreader.f:
    int FLAG_INSTALLED_ONLY -> a
    int FLAG_SHOW_AS_DICTIONARY -> b
    int FLAG_SHOW_AS_TRANSLATOR -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption ourSingleWordTranslatorOption -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption ourMultiWordTranslatorOption -> e
    java.util.Map ourInfos -> f
    void init(android.content.Context) -> a
    java.util.List dictionaryInfos(android.content.Context,boolean) -> a
    org.geometerplus.android.fbreader.PackageInfo firstInfo() -> g
    org.geometerplus.zlibrary.core.options.ZLStringOption singleWordTranslatorOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption multiWordTranslatorOption() -> b
    org.geometerplus.android.fbreader.PackageInfo getCurrentDictionaryInfo(boolean) -> a
    android.content.Intent getDictionaryIntent(org.geometerplus.android.fbreader.PackageInfo,java.lang.String) -> a
    void openWordInDictionary(android.app.Activity,org.geometerplus.zlibrary.text.view.ZLTextWord,org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    int access$0() -> c
    int access$1() -> d
    int access$2() -> e
    java.util.Map access$3() -> f
    void access$4(android.app.Activity,org.geometerplus.android.fbreader.PackageInfo) -> a
org.geometerplus.android.fbreader.DictionaryUtil$1 -> org.geometerplus.android.fbreader.g:
    android.content.Context val$context -> a
    void run() -> run
org.geometerplus.android.fbreader.DictionaryUtil$2 -> org.geometerplus.android.fbreader.h:
    android.app.Activity val$activity -> a
    org.geometerplus.android.fbreader.PackageInfo val$dictionaryInfo -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.DictionaryUtil$InfoReader -> org.geometerplus.android.fbreader.i:
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.android.fbreader.DictionaryUtil$ParagonInfoReader -> org.geometerplus.android.fbreader.j:
    android.content.Context myContext -> a
    int myCounter -> b
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.android.fbreader.FBAndroidAction -> org.geometerplus.android.fbreader.k:
    org.geometerplus.android.fbreader.FBReader BaseActivity -> a
org.geometerplus.android.fbreader.FBReader -> org.geometerplus.android.fbreader.FBReader:
    int myFullScreenFlag -> a
    android.app.ActionBar bar -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp fbReader -> c
    java.util.List myPluginActions -> d
    android.content.BroadcastReceiver myPluginInfoReceiver -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    java.lang.Runnable getPostponedInitAction() -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    boolean onSearchRequested() -> onSearchRequested
    void showSelectionPanel() -> b
    void hideSelectionPanel() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void navigate() -> d
    void addMenuItem(android.view.Menu,java.lang.String,int,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void dictionarySearch() -> e
    java.lang.String getChineseByHanzi(java.lang.String) -> a
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication() -> f
    java.util.List access$1(org.geometerplus.android.fbreader.FBReader) -> a
org.geometerplus.android.fbreader.FBReader$1 -> org.geometerplus.android.fbreader.l:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.FBReader$2 -> org.geometerplus.android.fbreader.m:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.FBReader$2$1 -> org.geometerplus.android.fbreader.n:
    org.geometerplus.android.fbreader.FBReader$2 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.FBReader$3 -> org.geometerplus.android.fbreader.o:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbReader -> b
    java.lang.String val$pattern -> c
    void run() -> run
org.geometerplus.android.fbreader.FBReader$3$1 -> org.geometerplus.android.fbreader.p:
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbReader -> a
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> b
    void run() -> run
org.geometerplus.android.fbreader.FBReader$3$2 -> org.geometerplus.android.fbreader.q:
    org.geometerplus.android.fbreader.FBReader$3 this$1 -> a
    org.geometerplus.android.fbreader.TextSearchPopup val$popup -> b
    void run() -> run
org.geometerplus.android.fbreader.FBReader$4 -> org.geometerplus.android.fbreader.r:
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel val$popup -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbreader -> b
    android.app.SearchManager val$manager -> c
    void onCancel() -> onCancel
org.geometerplus.android.fbreader.FBReader$5 -> org.geometerplus.android.fbreader.s:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    java.lang.String[] val$newText -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.FBReader$TipRunner -> org.geometerplus.android.fbreader.t:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tips$TipsManager$Action -> b
    void run() -> run
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tips$TipsManager$Action() -> a
org.geometerplus.android.fbreader.NavigationPopup -> org.geometerplus.android.fbreader.u:
    boolean myIsInProgress -> d
    void runNavigation() -> b
    java.lang.String getId() -> c
    void show_() -> d
    void update() -> a
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
    void setupNavigation(org.geometerplus.android.fbreader.PopupWindow) -> a
    java.lang.String makeProgressText(int,int) -> a
    void access$0(org.geometerplus.android.fbreader.NavigationPopup,boolean) -> a
    java.lang.String access$1(org.geometerplus.android.fbreader.NavigationPopup,int,int) -> a
    org.geometerplus.zlibrary.core.application.ZLApplication access$2(org.geometerplus.android.fbreader.NavigationPopup) -> a
org.geometerplus.android.fbreader.NavigationPopup$1 -> org.geometerplus.android.fbreader.v:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.TextView val$text -> b
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
org.geometerplus.android.fbreader.NavigationPopup$2 -> org.geometerplus.android.fbreader.w:
    org.geometerplus.android.fbreader.NavigationPopup this$0 -> a
    android.widget.Button val$btnCancel -> b
    android.widget.Button val$btnOk -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.PackageInfo -> org.geometerplus.android.fbreader.x:
    java.lang.String Id -> a
    java.lang.String PackageName -> b
    java.lang.String ClassName -> c
    java.lang.String Title -> d
    java.lang.String IntentAction -> e
    java.lang.String IntentKey -> f
    java.lang.String IntentDataPattern -> g
org.geometerplus.android.fbreader.PopupPanel -> org.geometerplus.android.fbreader.y:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartPosition -> a
    org.geometerplus.android.fbreader.PopupWindow myWindow -> b
    org.geometerplus.android.fbreader.FBReader myActivity -> d
    android.widget.RelativeLayout myRoot -> e
    org.geometerplus.fbreader.fbreader.FBReaderApp getReader() -> e
    void show_() -> d
    void hide_() -> f
    void removeAllWindows(org.geometerplus.zlibrary.core.application.ZLApplication,android.app.Activity) -> a
    void restoreVisibilities(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
    void initPosition() -> g
    void storePosition() -> h
    void setPanelInfo(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> b
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
org.geometerplus.android.fbreader.PopupWindow -> org.geometerplus.android.fbreader.z:
    android.app.Activity myActivity -> a
    android.app.Activity getActivity() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void show() -> b
    void hide() -> c
    void addView(android.view.View) -> addView
org.geometerplus.android.fbreader.PopupWindow$1 -> org.geometerplus.android.fbreader.A:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$2 -> org.geometerplus.android.fbreader.B:
    org.geometerplus.android.fbreader.PopupWindow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.PopupWindow$Location -> org.geometerplus.android.fbreader.C:
    org.geometerplus.android.fbreader.PopupWindow$Location Bottom -> a
    org.geometerplus.android.fbreader.PopupWindow$Location Floating -> b
org.geometerplus.android.fbreader.ProcessHyperlinkAction -> org.geometerplus.android.fbreader.D:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ProcessHyperlinkAction$1 -> org.geometerplus.android.fbreader.E:
    org.geometerplus.android.fbreader.ProcessHyperlinkAction this$0 -> a
    java.lang.String val$url -> b
    org.geometerplus.fbreader.network.NetworkLibrary val$nLibrary -> c
    android.content.Intent val$intent -> d
    boolean val$externalUrl -> e
    void run() -> run
org.geometerplus.android.fbreader.ProcessHyperlinkAction$1$1 -> org.geometerplus.android.fbreader.F:
    org.geometerplus.android.fbreader.ProcessHyperlinkAction$1 this$1 -> a
    android.content.Intent val$intent -> b
    void run() -> run
org.geometerplus.android.fbreader.RunActivityAction -> org.geometerplus.android.fbreader.G:
    java.lang.Class myActivityClass -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.RunPluginAction -> org.geometerplus.android.fbreader.H:
    android.net.Uri myUri -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SearchAction -> org.geometerplus.android.fbreader.I:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionBookmarkAction -> org.geometerplus.android.fbreader.J:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionCopyAction -> org.geometerplus.android.fbreader.K:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionHidePanelAction -> org.geometerplus.android.fbreader.L:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionPopup -> org.geometerplus.android.fbreader.M:
    java.lang.String getId() -> c
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
    void move(int,int) -> a
org.geometerplus.android.fbreader.SelectionShareAction -> org.geometerplus.android.fbreader.N:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionShowPanelAction -> org.geometerplus.android.fbreader.O:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SelectionTranslateAction -> org.geometerplus.android.fbreader.P:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.SetScreenOrientationAction -> org.geometerplus.android.fbreader.Q:
    java.lang.String myOptionValue -> c
    void setOrientation(android.app.Activity,java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isChecked() -> c
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShareBookAction -> org.geometerplus.android.fbreader.R:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowActionBarAction -> org.geometerplus.android.fbreader.S:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowBookInfoAction -> org.geometerplus.android.fbreader.T:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowBookmarksAction -> org.geometerplus.android.fbreader.U:
org.geometerplus.android.fbreader.ShowCancelMenuAction -> org.geometerplus.android.fbreader.V:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowLibraryAction -> org.geometerplus.android.fbreader.W:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowMenuAction -> org.geometerplus.android.fbreader.X:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowNavigationAction -> org.geometerplus.android.fbreader.Y:
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowNetworkLibraryAction -> org.geometerplus.android.fbreader.Z:
org.geometerplus.android.fbreader.ShowPreferencesAction -> org.geometerplus.android.fbreader.aa:
    void run(java.lang.Object[]) -> a
org.geometerplus.android.fbreader.ShowTOCAction -> org.geometerplus.android.fbreader.ab:
    boolean isVisible() -> b
org.geometerplus.android.fbreader.SimpleContainer -> org.geometerplus.android.fbreader.ac:
    android.view.View myEditText -> a
    android.widget.Button myOkButton -> b
    android.widget.Button myCancelButton -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
org.geometerplus.android.fbreader.SunReaderApplication -> org.geometerplus.android.fbreader.SunReaderApplication:
    void onCreate() -> onCreate
org.geometerplus.android.fbreader.TOCActivity -> org.geometerplus.android.fbreader.TOCActivity:
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter myAdapter -> a
    android.widget.ListView gv -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp fbreader -> c
    org.geometerplus.zlibrary.text.view.ZLTextView view -> d
    android.widget.EditText pageEdit -> e
    void onCreate(android.os.Bundle) -> onCreate
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void gotoSelectedPage(android.view.View) -> gotoSelectedPage
    void backToMain(android.view.View) -> backToMain
    android.widget.ListView access$0(org.geometerplus.android.fbreader.TOCActivity) -> a
org.geometerplus.android.fbreader.TOCActivity$TOCAdapter -> org.geometerplus.android.fbreader.ad:
    org.geometerplus.android.fbreader.TOCActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void openBookText(org.geometerplus.fbreader.bookmodel.TOCTree) -> a
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.android.fbreader.TextSearchPopup -> org.geometerplus.android.fbreader.ae:
    java.lang.String getId() -> c
    void hide_() -> f
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
org.geometerplus.android.fbreader.ZLTreeAdapter -> org.geometerplus.android.fbreader.af:
    android.widget.ListView myParent -> a
    org.geometerplus.zlibrary.core.tree.ZLTree myTree -> b
    org.geometerplus.zlibrary.core.tree.ZLTree[] myItems -> c
    java.util.HashSet myOpenItems -> d
    boolean isOpen(org.geometerplus.zlibrary.core.tree.ZLTree) -> b
    void selectItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> c
    int getCount(org.geometerplus.zlibrary.core.tree.ZLTree) -> d
    int getCount() -> getCount
    int indexByPosition(int,org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    org.geometerplus.zlibrary.core.tree.ZLTree getItem(int) -> a
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.api.ApiInterface -> org.geometerplus.android.fbreader.api.a:
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map requestMap$cb8ccd7(int) -> a
org.geometerplus.android.fbreader.api.ApiInterface$Stub -> org.geometerplus.android.fbreader.api.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.api.ApiObject -> org.geometerplus.android.fbreader.api.c:
    android.os.Parcelable$Creator CREATOR -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(int) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(boolean) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(java.lang.String) -> a
    org.geometerplus.android.fbreader.api.ApiObject envelope(java.util.Date) -> a
    java.util.List envelope(java.util.List) -> a
    int type() -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$1 -> org.geometerplus.android.fbreader.api.d:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.ApiObject$Boolean -> org.geometerplus.android.fbreader.api.e:
    boolean Value -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Date -> org.geometerplus.android.fbreader.api.f:
    java.util.Date Value -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Error -> org.geometerplus.android.fbreader.api.g:
    java.lang.String Message -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Integer -> org.geometerplus.android.fbreader.api.h:
    int Value -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Long -> org.geometerplus.android.fbreader.api.i:
    long Value -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$String -> org.geometerplus.android.fbreader.api.j:
    java.lang.String Value -> b
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.ApiObject$Void -> org.geometerplus.android.fbreader.api.k:
    org.geometerplus.android.fbreader.api.ApiObject$Void Instance -> b
    int type() -> a
org.geometerplus.android.fbreader.api.ApiServerImplementation -> org.geometerplus.android.fbreader.api.l:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> a
    void sendEvent(android.content.ContextWrapper,java.lang.String) -> a
    org.geometerplus.android.fbreader.api.ApiObject$Error unsupportedMethodError(int) -> b
    org.geometerplus.android.fbreader.api.ApiObject$Error exceptionInMethodError(int,java.lang.Throwable) -> a
    org.geometerplus.android.fbreader.api.ApiObject request(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> a
    java.util.List requestList(int,org.geometerplus.android.fbreader.api.ApiObject[]) -> b
    java.util.Map requestMap$cb8ccd7(int) -> a
    org.geometerplus.android.fbreader.api.TextPosition getTextPosition(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextFixedPosition getZLTextPosition(org.geometerplus.android.fbreader.api.TextPosition) -> a
org.geometerplus.android.fbreader.api.ApiService -> org.geometerplus.android.fbreader.api.ApiService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo -> org.geometerplus.android.fbreader.api.m:
    java.lang.String myId -> a
    android.net.Uri getId() -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.PluginApi$ActionInfo$1 -> org.geometerplus.android.fbreader.api.n:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo -> org.geometerplus.android.fbreader.api.o:
    java.lang.String MenuItemName -> a
    int Weight -> b
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.android.fbreader.api.TextPosition -> org.geometerplus.android.fbreader.api.p:
    int ParagraphIndex -> b
    int ElementIndex -> c
    int CharIndex -> d
    int type() -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.geometerplus.android.fbreader.api.TextPosition$1 -> org.geometerplus.android.fbreader.api.q:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.covers.CoverCache -> org.geometerplus.android.fbreader.a.a:
    java.lang.Object NULL_BITMAP -> b
    int HoldersCounter -> a
    java.util.Map myBitmaps -> c
    android.graphics.Bitmap getBitmap(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void putBitmap(org.geometerplus.fbreader.tree.FBTree$Key,android.graphics.Bitmap) -> a
org.geometerplus.android.fbreader.covers.CoverCache$1 -> org.geometerplus.android.fbreader.a.b:
    org.geometerplus.android.fbreader.covers.CoverCache this$0 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
org.geometerplus.android.fbreader.covers.CoverCache$NullObjectException -> org.geometerplus.android.fbreader.a.c:
org.geometerplus.android.fbreader.covers.CoverHolder -> org.geometerplus.android.fbreader.a.d:
    org.geometerplus.android.fbreader.covers.CoverManager myManager -> d
    android.widget.ImageView CoverView -> a
    org.geometerplus.fbreader.tree.FBTree$Key Key -> b
    org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable coverSyncRunnable -> e
    java.util.concurrent.Future coverBitmapTask -> c
    java.lang.Runnable coverBitmapRunnable -> f
    void setKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void access$0(org.geometerplus.android.fbreader.covers.CoverHolder,org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable) -> a
    org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable access$1(org.geometerplus.android.fbreader.covers.CoverHolder) -> a
    org.geometerplus.android.fbreader.covers.CoverManager access$2(org.geometerplus.android.fbreader.covers.CoverHolder) -> b
    void access$3(org.geometerplus.android.fbreader.covers.CoverHolder,java.lang.Runnable) -> a
    java.lang.Runnable access$4(org.geometerplus.android.fbreader.covers.CoverHolder) -> c
org.geometerplus.android.fbreader.covers.CoverHolder$CoverBitmapRunnable -> org.geometerplus.android.fbreader.a.e:
    org.geometerplus.zlibrary.core.image.ZLLoadableImage myImage -> b
    org.geometerplus.fbreader.tree.FBTree$Key myKey -> c
    org.geometerplus.android.fbreader.covers.CoverHolder this$0 -> a
    void run() -> run
    org.geometerplus.fbreader.tree.FBTree$Key access$0(org.geometerplus.android.fbreader.covers.CoverHolder$CoverBitmapRunnable) -> a
org.geometerplus.android.fbreader.covers.CoverHolder$CoverBitmapRunnable$1 -> org.geometerplus.android.fbreader.a.f:
    org.geometerplus.android.fbreader.covers.CoverHolder$CoverBitmapRunnable this$1 -> a
    android.graphics.Bitmap val$coverBitmap -> b
    void run() -> run
org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable -> org.geometerplus.android.fbreader.a.g:
    org.geometerplus.zlibrary.core.image.ZLLoadableImage myImage -> b
    org.geometerplus.fbreader.tree.FBTree$Key myKey -> c
    org.geometerplus.android.fbreader.covers.CoverHolder this$0 -> a
    void run() -> run
    org.geometerplus.fbreader.tree.FBTree$Key access$0(org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable) -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage access$1(org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable) -> b
org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable$1 -> org.geometerplus.android.fbreader.a.h:
    org.geometerplus.android.fbreader.covers.CoverHolder$CoverSyncRunnable this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.covers.CoverManager -> org.geometerplus.android.fbreader.a.i:
    org.geometerplus.android.fbreader.covers.CoverCache Cache -> a
    java.util.concurrent.ExecutorService myPool -> b
    android.app.Activity myActivity -> c
    int myCoverWidth -> d
    int myCoverHeight -> e
    void runOnUiThread(java.lang.Runnable) -> a
    void setupCoverView(android.widget.ImageView) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void setCoverForView(org.geometerplus.android.fbreader.covers.CoverHolder,org.geometerplus.zlibrary.core.image.ZLLoadableImage) -> a
    boolean trySetCoverImage(android.widget.ImageView,org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.android.fbreader.covers.CoverManager$MinPriorityThreadFactory -> org.geometerplus.android.fbreader.a.j:
    java.util.concurrent.ThreadFactory myDefaultThreadFactory -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity -> org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity$1 -> org.geometerplus.android.fbreader.crash.a:
    org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity this$0 -> a
    android.widget.EditText val$directoryView -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity$2 -> org.geometerplus.android.fbreader.crash.b:
    org.geometerplus.android.fbreader.crash.FixBooksDirectoryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity -> org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity$1 -> org.geometerplus.android.fbreader.crash.c:
    org.geometerplus.android.fbreader.crash.MissingNativeLibraryActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.error.BookReadingErrorActivity -> org.geometerplus.android.fbreader.error.BookReadingErrorActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.error.BookReadingErrorActivity$1 -> org.geometerplus.android.fbreader.error.a:
    org.geometerplus.android.fbreader.error.BookReadingErrorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.error.BookReadingErrorActivity$2 -> org.geometerplus.android.fbreader.error.b:
    org.geometerplus.android.fbreader.error.BookReadingErrorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.image.ImageViewActivity -> org.geometerplus.android.fbreader.image.ImageViewActivity:
    android.graphics.Bitmap myBitmap -> a
    org.geometerplus.zlibrary.core.util.ZLColor myBgColor -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.util.ZLColor access$0(org.geometerplus.android.fbreader.image.ImageViewActivity) -> a
    android.graphics.Bitmap access$1(org.geometerplus.android.fbreader.image.ImageViewActivity) -> b
org.geometerplus.android.fbreader.image.ImageViewActivity$ImageView -> org.geometerplus.android.fbreader.image.a:
    android.graphics.Paint myPaint -> a
    int myDx -> b
    int myDy -> c
    float myZoomFactor -> d
    boolean myMotionControl -> e
    int mySavedX -> f
    int mySavedY -> g
    float myStartPinchDistance2 -> h
    float myStartZoomFactor -> i
    org.geometerplus.android.fbreader.image.ImageViewActivity this$0 -> j
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.geometerplus.android.fbreader.library.BookInfoActivity -> org.geometerplus.android.fbreader.library.BookInfoActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    int myResult -> c
    boolean myDontReloadBook -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setupInfoPair(int,java.lang.String,java.lang.CharSequence) -> a
    void setupInfoPair(int,java.lang.String,java.lang.CharSequence,int) -> a
    void setupBookInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean access$0(org.geometerplus.android.fbreader.library.BookInfoActivity) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$1(org.geometerplus.android.fbreader.library.BookInfoActivity) -> b
    void access$2(org.geometerplus.android.fbreader.library.BookInfoActivity,org.geometerplus.fbreader.library.Book) -> a
    void access$3(org.geometerplus.android.fbreader.library.BookInfoActivity,boolean) -> a
org.geometerplus.android.fbreader.library.BookInfoActivity$1 -> org.geometerplus.android.fbreader.library.a:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.BookInfoActivity$2 -> org.geometerplus.android.fbreader.library.b:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.BookInfoActivity$3 -> org.geometerplus.android.fbreader.library.c:
    org.geometerplus.android.fbreader.library.BookInfoActivity this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.library.KillerCallback -> org.geometerplus.android.fbreader.library.KillerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.library.LibraryActivity -> org.geometerplus.android.fbreader.library.LibraryActivity:
    boolean ourToBeKilled -> a
    org.geometerplus.fbreader.library.BooksDatabase myDatabase -> c
    org.geometerplus.fbreader.library.Library myLibrary -> d
    org.geometerplus.fbreader.library.Book mySelectedBook -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption BookSearchPatternOption -> b
    void onCreate(android.os.Bundle) -> onCreate
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void showBookInfo(org.geometerplus.fbreader.library.Book) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onSearchRequested() -> onSearchRequested
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void onLibraryChanged(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code) -> a
    void access$0(org.geometerplus.android.fbreader.library.LibraryActivity,org.geometerplus.fbreader.library.Book,int) -> a
    org.geometerplus.fbreader.tree.FBTree access$1(org.geometerplus.android.fbreader.library.LibraryActivity) -> a
    org.geometerplus.fbreader.library.Library access$2(org.geometerplus.android.fbreader.library.LibraryActivity) -> b
    void access$3(org.geometerplus.android.fbreader.library.LibraryActivity) -> c
org.geometerplus.android.fbreader.library.LibraryActivity$1 -> org.geometerplus.android.fbreader.library.d:
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> a
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code val$code -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$library$AbstractLibrary$ChangeListener$Code -> c
    void run() -> run
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$library$AbstractLibrary$ChangeListener$Code() -> a
org.geometerplus.android.fbreader.library.LibraryActivity$BookDeleter -> org.geometerplus.android.fbreader.library.e:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myMode -> b
    org.geometerplus.android.fbreader.library.LibraryActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.library.LibrarySearchActivity -> org.geometerplus.android.fbreader.library.LibrarySearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.library.LibraryTreeAdapter -> org.geometerplus.android.fbreader.library.f:
    org.geometerplus.android.fbreader.covers.CoverManager myCoverManager -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase -> org.geometerplus.android.fbreader.library.g:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    boolean myTagCacheIsInitialized -> b
    java.util.HashMap myIdByTag -> c
    java.util.HashMap myTagById -> d
    android.database.sqlite.SQLiteStatement myUpdateBookInfoStatement -> e
    android.database.sqlite.SQLiteStatement myInsertBookInfoStatement -> f
    android.database.sqlite.SQLiteStatement myDeleteBookAuthorsStatement -> g
    android.database.sqlite.SQLiteStatement myGetAuthorIdStatement -> h
    android.database.sqlite.SQLiteStatement myInsertAuthorStatement -> i
    android.database.sqlite.SQLiteStatement myInsertBookAuthorStatement -> j
    android.database.sqlite.SQLiteStatement myGetTagIdStatement -> k
    android.database.sqlite.SQLiteStatement myCreateTagIdStatement -> l
    android.database.sqlite.SQLiteStatement myDeleteBookTagsStatement -> m
    android.database.sqlite.SQLiteStatement myInsertBookTagStatement -> n
    android.database.sqlite.SQLiteStatement myGetSeriesIdStatement -> o
    android.database.sqlite.SQLiteStatement myInsertSeriesStatement -> p
    android.database.sqlite.SQLiteStatement myInsertBookSeriesStatement -> q
    android.database.sqlite.SQLiteStatement myDeleteBookSeriesStatement -> r
    android.database.sqlite.SQLiteStatement myRemoveFileInfoStatement -> s
    android.database.sqlite.SQLiteStatement myInsertFileInfoStatement -> t
    android.database.sqlite.SQLiteStatement myUpdateFileInfoStatement -> u
    android.database.sqlite.SQLiteStatement mySaveRecentBookStatement -> v
    android.database.sqlite.SQLiteStatement myAddToFavoritesStatement -> w
    android.database.sqlite.SQLiteStatement myRemoveFromFavoritesStatement -> x
    android.database.sqlite.SQLiteStatement myInsertBookmarkStatement -> y
    android.database.sqlite.SQLiteStatement myUpdateBookmarkStatement -> z
    android.database.sqlite.SQLiteStatement myDeleteBookmarkStatement -> A
    android.database.sqlite.SQLiteStatement myStorePositionStatement -> B
    android.database.sqlite.SQLiteStatement myInsertIntoBookListStatement -> C
    android.database.sqlite.SQLiteStatement myDeleteFromBookListStatement -> D
    android.database.sqlite.SQLiteStatement myDeleteVisitedHyperlinksStatement -> E
    android.database.sqlite.SQLiteStatement myStoreVisitedHyperlinksStatement -> F
    void executeAsATransaction(java.lang.Runnable) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void initTagCache() -> f
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet,boolean) -> a
    void setExistingFlag(java.util.Collection,boolean) -> a
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    java.util.List loadAuthors(long) -> c
    long getTagId(org.geometerplus.fbreader.library.Tag) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.Tag getTagById(long) -> o
    java.util.List loadTags(long) -> e
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadRecentBookIds() -> b
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    java.util.List loadFavoritesIds() -> c
    java.util.List loadBookmarks(long,boolean) -> a
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> k
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> l
    boolean deleteFromBookList(long) -> m
    void addVisitedHyperlink(long,java.lang.String) -> a
    java.util.Collection loadVisitedHyperlinks(long) -> n
    android.database.sqlite.SQLiteDatabase access$0(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> a
    void access$1(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> c
    void access$3(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> d
    void access$4(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> e
    void access$5(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> f
    void access$6(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> g
    void access$7(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> h
    void access$8(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> i
    void access$9(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> j
    void access$10(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> k
    void access$11(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> l
    void access$12(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> m
    void access$13(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> n
    void access$14(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> o
    void access$15(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> p
    void access$16(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> q
    void access$17(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> r
    void access$18(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> s
    void access$19(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> t
    android.database.sqlite.SQLiteStatement access$20(org.geometerplus.android.fbreader.library.SQLiteBooksDatabase) -> u
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase$1 -> org.geometerplus.android.fbreader.library.h:
    org.geometerplus.android.fbreader.library.SQLiteBooksDatabase this$0 -> a
    int val$version -> b
    void run() -> run
org.geometerplus.android.fbreader.library.SQLiteBooksDatabase$2 -> org.geometerplus.android.fbreader.library.i:
    org.geometerplus.android.fbreader.library.SQLiteBooksDatabase this$0 -> a
    java.util.List val$ids -> b
    void run() -> run
org.geometerplus.android.fbreader.libraryService.LibraryInterface -> org.geometerplus.android.fbreader.libraryService.a:
    boolean isUpToDate() -> a
org.geometerplus.android.fbreader.libraryService.LibraryInterface$Stub -> org.geometerplus.android.fbreader.libraryService.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.libraryService.LibraryService -> org.geometerplus.android.fbreader.libraryService.LibraryService:
    org.geometerplus.android.fbreader.libraryService.LibraryService$LibraryImplementation myLibrary -> a
    void onStart(android.content.Intent,int) -> onStart
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void onLibraryChanged(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code) -> a
org.geometerplus.android.fbreader.libraryService.LibraryService$LibraryImplementation -> org.geometerplus.android.fbreader.libraryService.c:
    org.geometerplus.fbreader.library.AbstractLibrary myBaseLibrary -> a
    boolean isUpToDate() -> a
    org.geometerplus.fbreader.library.AbstractLibrary access$0(org.geometerplus.android.fbreader.libraryService.LibraryService$LibraryImplementation) -> a
org.geometerplus.android.fbreader.network.AddCatalogMenuActivity -> org.geometerplus.android.fbreader.network.AddCatalogMenuActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity -> org.geometerplus.android.fbreader.network.AddCustomCatalogActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink myLink -> b
    boolean myEditNotAdd -> c
    org.geometerplus.fbreader.network.INetworkLink$Type myType -> d
    void onCreate(android.os.Bundle) -> onCreate
    boolean isEmptyString(java.lang.String) -> a
    void setExtraFieldsVisibility(boolean) -> a
    void setTextById(int,java.lang.String) -> a
    java.lang.String getTextById(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setTextFromResource(int,java.lang.String) -> b
    void setErrorText(java.lang.String) -> b
    void setErrorByKey(java.lang.String) -> c
    void loadInfoByUri(android.net.Uri) -> a
    void access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink access$1(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> b
    void access$2(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,int,java.lang.String) -> a
    void access$3(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,boolean) -> a
    void access$4(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void access$5(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,java.lang.String) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$1 -> org.geometerplus.android.fbreader.network.a:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$2 -> org.geometerplus.android.fbreader.network.b:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$3 -> org.geometerplus.android.fbreader.network.c:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    int val$visibility -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$4 -> org.geometerplus.android.fbreader.network.d:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    java.lang.String val$errorText -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 -> org.geometerplus.android.fbreader.network.e:
    java.lang.String myError -> b
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void run() -> run
    java.lang.String access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5$1 -> org.geometerplus.android.fbreader.network.f:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity -> org.geometerplus.android.fbreader.network.AuthenticationActivity:
    java.util.Map ourOnSuccessRunnableMap -> a
    long ourNextCode -> b
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> c
    org.geometerplus.fbreader.network.INetworkLink myLink -> d
    android.widget.Button myOkButton -> e
    java.util.Timer myOkButtonUpdater -> f
    android.widget.TextView myUsernameView -> g
    boolean myCustomAuthentication -> h
    java.lang.Runnable myOnSuccessRunnable -> i
    android.content.Intent registerRunnable(android.content.Intent,java.lang.Runnable) -> a
    void initCredentialsCreator(android.content.Context) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void setError(java.lang.String) -> a
    android.widget.TextView findTextView(int) -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    android.widget.TextView access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> a
    android.widget.TextView access$1(org.geometerplus.android.fbreader.network.AuthenticationActivity,int) -> a
    boolean access$2(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String,java.lang.String) -> a
    void access$4(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String,java.lang.String) -> b
    org.geometerplus.fbreader.network.INetworkLink access$5(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> c
    java.lang.Runnable access$6(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> d
    void access$7(org.geometerplus.android.fbreader.network.AuthenticationActivity,java.lang.String) -> a
    android.widget.Button access$8(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> e
org.geometerplus.android.fbreader.network.AuthenticationActivity$1 -> org.geometerplus.android.fbreader.network.g:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$2 -> org.geometerplus.android.fbreader.network.h:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
    org.geometerplus.android.fbreader.network.AuthenticationActivity access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity$2) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$2$1 -> org.geometerplus.android.fbreader.network.i:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$2 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$3 -> org.geometerplus.android.fbreader.network.j:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    java.lang.String val$username -> c
    java.lang.String val$password -> d
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$3$1 -> org.geometerplus.android.fbreader.network.k:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$3 this$1 -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException val$e -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$4 -> org.geometerplus.android.fbreader.network.l:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void run() -> run
    org.geometerplus.android.fbreader.network.AuthenticationActivity access$0(org.geometerplus.android.fbreader.network.AuthenticationActivity$4) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$4$1 -> org.geometerplus.android.fbreader.network.m:
    org.geometerplus.android.fbreader.network.AuthenticationActivity$4 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AuthenticationActivity$CredentialsCreator -> org.geometerplus.android.fbreader.network.n:
    android.content.Context myContext -> a
    void startAuthenticationDialog(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.android.fbreader.network.AuthorizationMenuActivity -> org.geometerplus.android.fbreader.network.AuthorizationMenuActivity:
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    void runMenu(android.content.Context,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runMenu(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int) -> a
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.BookDownloader -> org.geometerplus.android.fbreader.network.BookDownloader:
    boolean acceptsUri(android.net.Uri) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.BookDownloaderInterface -> org.geometerplus.android.fbreader.network.o:
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub -> org.geometerplus.android.fbreader.network.p:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub$Proxy -> org.geometerplus.android.fbreader.network.q:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService -> org.geometerplus.android.fbreader.network.BookDownloaderService:
    java.util.Set myDownloadingURLs -> a
    java.util.Set myOngoingNotifications -> b
    int myServiceCounter -> c
    void doStop() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void onStart(android.content.Intent,int) -> onStart
    void showMessage(java.lang.String) -> a
    void showMessage(java.lang.String,java.lang.String) -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    void sendDownloaderCallback() -> b
    java.util.Set access$0(org.geometerplus.android.fbreader.network.BookDownloaderService) -> a
    java.util.Set access$1(org.geometerplus.android.fbreader.network.BookDownloaderService) -> b
    android.app.Notification access$2(org.geometerplus.android.fbreader.network.BookDownloaderService,java.io.File,java.lang.String,boolean) -> a
    void access$3(org.geometerplus.android.fbreader.network.BookDownloaderService) -> c
    void access$4(org.geometerplus.android.fbreader.network.BookDownloaderService) -> d
org.geometerplus.android.fbreader.network.BookDownloaderService$1 -> org.geometerplus.android.fbreader.network.r:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$2 -> org.geometerplus.android.fbreader.network.s:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.app.Notification val$progressNotification -> b
    int val$notificationId -> c
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$3 -> org.geometerplus.android.fbreader.network.t:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    java.lang.String val$urlString -> b
    int val$notificationId -> c
    java.io.File val$file -> d
    java.lang.String val$title -> e
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$4 -> org.geometerplus.android.fbreader.network.u:
    android.os.Handler val$progressHandler -> a
    java.io.File val$file -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$5 -> org.geometerplus.android.fbreader.network.v:
    android.os.Handler val$downloadFinishHandler -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest val$request -> b
    java.io.File val$file -> c
    void run() -> run
org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection -> org.geometerplus.android.fbreader.network.w:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface myInterface -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BuyBooksActivity -> org.geometerplus.android.fbreader.network.BuyBooksActivity:
    org.geometerplus.fbreader.network.NetworkLibrary myLibrary -> a
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    java.util.List myBooks -> c
    org.geometerplus.zlibrary.core.money.Money myCost -> d
    org.geometerplus.zlibrary.core.money.Money myAccount -> e
    int[] $SWITCH_TABLE$org$geometerplus$android$fbreader$network$BuyBooksActivity$AuthorizationState -> f
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code -> g
    void run(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree) -> a
    void run(android.app.Activity,java.util.List) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupUI(org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> a
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    org.geometerplus.zlibrary.core.money.Money calculateCost() -> a
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    void updateAuthorizationState() -> b
    void access$0(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> a
    org.geometerplus.fbreader.network.INetworkLink access$1(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> a
    void access$2(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> b
    org.geometerplus.zlibrary.core.money.Money access$3(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> c
    org.geometerplus.zlibrary.core.money.Money access$4(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> d
    java.lang.Runnable access$5(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> e
    int[] $SWITCH_TABLE$org$geometerplus$android$fbreader$network$BuyBooksActivity$AuthorizationState() -> c
    void access$7(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> f
    void access$8(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money access$9(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> g
    void access$10(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.zlibrary.core.money.Money) -> b
    void access$11(org.geometerplus.android.fbreader.network.BuyBooksActivity,org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState) -> b
    org.geometerplus.fbreader.network.NetworkLibrary access$12(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> h
    java.util.List access$13(org.geometerplus.android.fbreader.network.BuyBooksActivity) -> i
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code() -> d
org.geometerplus.android.fbreader.network.BuyBooksActivity$1 -> org.geometerplus.android.fbreader.network.x:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState val$state -> b
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$10 -> org.geometerplus.android.fbreader.network.y:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$11 -> org.geometerplus.android.fbreader.network.z:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$11$1 -> org.geometerplus.android.fbreader.network.A:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$11 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$12 -> org.geometerplus.android.fbreader.network.B:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$12$1 -> org.geometerplus.android.fbreader.network.C:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$12 this$1 -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$b -> b
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$12$2 -> org.geometerplus.android.fbreader.network.D:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$12 this$1 -> a
    org.geometerplus.zlibrary.core.resources.ZLResource val$boxResource -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkException val$e -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> d
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$13 -> org.geometerplus.android.fbreader.network.E:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.BuyBooksActivity$2 -> org.geometerplus.android.fbreader.network.F:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$3 -> org.geometerplus.android.fbreader.network.G:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$4 -> org.geometerplus.android.fbreader.network.H:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$5 -> org.geometerplus.android.fbreader.network.I:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$6 -> org.geometerplus.android.fbreader.network.J:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$7 -> org.geometerplus.android.fbreader.network.K:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$8 -> org.geometerplus.android.fbreader.network.L:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$9 -> org.geometerplus.android.fbreader.network.M:
    org.geometerplus.android.fbreader.network.BuyBooksActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState -> org.geometerplus.android.fbreader.network.N:
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState Authorized -> a
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState NotAuthorized -> b
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState[] ENUM$VALUES -> c
    org.geometerplus.android.fbreader.network.BuyBooksActivity$AuthorizationState[] values() -> a
org.geometerplus.android.fbreader.network.ListenerCallback -> org.geometerplus.android.fbreader.network.ListenerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void access$0(org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager,android.content.Intent) -> a
org.geometerplus.android.fbreader.network.ListenerCallback$1 -> org.geometerplus.android.fbreader.network.O:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    android.content.Intent val$intent -> b
    void run() -> run
org.geometerplus.android.fbreader.network.MenuActivity -> org.geometerplus.android.fbreader.network.P:
    java.util.List myInfos -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean finishInitialization() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
org.geometerplus.android.fbreader.network.MenuActivity$ActionListAdapter -> org.geometerplus.android.fbreader.network.Q:
    org.geometerplus.android.fbreader.network.MenuActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity -> org.geometerplus.android.fbreader.network.NetworkBookInfoActivity:
    org.geometerplus.fbreader.network.tree.NetworkBookTree myTree -> a
    org.geometerplus.fbreader.network.NetworkBookItem myBook -> b
    android.view.View myMainView -> c
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> d
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection myConnection -> e
    boolean myInitializerStarted -> f
    java.lang.Runnable myInitializer -> g
    java.lang.Runnable myViewInitializer -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void setTextFromResource(int,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void setPairLabelTextFromResource(int,java.lang.String) -> b
    void setPairLabelTextFromResource(int,java.lang.String,int) -> a
    void setPairValueText(int,java.lang.CharSequence) -> a
    void setupButtons() -> a
    void onStart() -> onStart
    void onStop() -> onStop
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    boolean access$0(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,boolean) -> a
    org.geometerplus.fbreader.network.NetworkBookItem access$2(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void access$4(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.fbreader.network.tree.NetworkBookTree) -> a
    org.geometerplus.fbreader.network.tree.NetworkBookTree access$5(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> c
    java.lang.Runnable access$6(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> d
    void access$7(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection access$8(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> e
    void access$9(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> f
    void access$10(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> g
    void access$11(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> h
    void access$12(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> i
    void access$13(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> j
    void access$14(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> k
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$1 -> org.geometerplus.android.fbreader.network.R:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$2 -> org.geometerplus.android.fbreader.network.S:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$3 -> org.geometerplus.android.fbreader.network.T:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo val$relatedInfo -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$4 -> org.geometerplus.android.fbreader.network.U:
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$img -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager val$mgr -> b
    int val$maxWidth -> c
    int val$maxHeight -> d
    android.widget.ImageView val$coverView -> e
    android.view.View val$rootView -> f
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$5 -> org.geometerplus.android.fbreader.network.V:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.android.fbreader.network.action.NetworkBookActions$NBAction val$a -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$6 -> org.geometerplus.android.fbreader.network.W:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity -> org.geometerplus.android.fbreader.network.X:
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection Connection -> a
    java.util.List myOptionsMenuActions -> b
    java.util.List myContextMenuActions -> c
    java.util.List myListClickActions -> d
    android.content.Intent myDeferredIntent -> e
    boolean mySingleCatalog -> f
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    boolean openTreeByIntent(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onSearchRequested() -> onSearchRequested
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isTreeInvisible(org.geometerplus.fbreader.tree.FBTree) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    java.util.List getContextMenuActions(org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    void onCurrentTreeChanged() -> a
    void checkAndRun(org.geometerplus.android.fbreader.network.action.Action,org.geometerplus.fbreader.network.NetworkTree) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> a
    org.geometerplus.fbreader.tree.FBTree access$2(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> b
    void access$3(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,java.lang.String) -> a
    android.content.Intent access$4(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> c
    boolean access$5(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,android.content.Intent) -> a
    void access$6(org.geometerplus.android.fbreader.network.NetworkLibraryActivity,android.content.Intent) -> b
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> d
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$1 -> org.geometerplus.android.fbreader.network.Y:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code val$code -> b
    java.lang.Object[] val$params -> c
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code -> d
    void run() -> run
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkLibrary$ChangeListener$Code() -> a
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$2 -> org.geometerplus.android.fbreader.network.Z:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$3 -> org.geometerplus.android.fbreader.network.aa:
    android.content.DialogInterface$OnClickListener val$listener -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$4 -> org.geometerplus.android.fbreader.network.ab:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$catalogTree -> a
    org.geometerplus.android.fbreader.network.action.Action val$action -> b
    org.geometerplus.fbreader.network.NetworkTree val$tree -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryAdapter -> org.geometerplus.android.fbreader.network.ac:
    org.geometerplus.android.fbreader.covers.CoverManager myCoverManager -> a
    void setSubviewText(android.view.View,int,java.lang.String) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.network.NetworkLibraryPrimaryActivity -> org.geometerplus.android.fbreader.network.NetworkLibraryPrimaryActivity:
org.geometerplus.android.fbreader.network.NetworkLibrarySecondaryActivity -> org.geometerplus.android.fbreader.network.NetworkLibrarySecondaryActivity:
org.geometerplus.android.fbreader.network.NetworkNotifications -> org.geometerplus.android.fbreader.network.ad:
    org.geometerplus.android.fbreader.network.NetworkNotifications ourInstance -> a
    int myBookDownloadingId -> b
    org.geometerplus.android.fbreader.network.NetworkNotifications Instance() -> a
    int getBookDownloadingId() -> b
org.geometerplus.android.fbreader.network.NetworkSearchActivity -> org.geometerplus.android.fbreader.network.NetworkSearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase -> org.geometerplus.android.fbreader.network.ae:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertCustomLinkStatement -> b
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkStatement -> c
    android.database.sqlite.SQLiteStatement myInsertCustomLinkUrlStatement -> d
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkUrlStatement -> e
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
    android.database.sqlite.SQLiteStatement access$0(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> a
    android.database.sqlite.SQLiteDatabase access$1(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> a
    android.database.sqlite.SQLiteStatement access$3(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> c
    void access$4(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> b
    android.database.sqlite.SQLiteStatement access$5(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> d
    void access$6(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> c
    android.database.sqlite.SQLiteStatement access$7(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> e
    void access$8(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> d
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$1 -> org.geometerplus.android.fbreader.network.af:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$2 -> org.geometerplus.android.fbreader.network.ag:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.TopupMenuActivity -> org.geometerplus.android.fbreader.network.TopupMenuActivity:
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    org.geometerplus.zlibrary.core.money.Money myAmount -> c
    boolean isTopupSupported(org.geometerplus.fbreader.network.INetworkLink) -> a
    void runMenu(android.content.Context,org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.zlibrary.core.money.Money) -> a
    void init() -> a
    java.lang.String getAction() -> b
    void runItem(org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo) -> a
    org.geometerplus.fbreader.network.INetworkLink access$0(org.geometerplus.android.fbreader.network.TopupMenuActivity) -> a
    org.geometerplus.zlibrary.core.money.Money access$1(org.geometerplus.android.fbreader.network.TopupMenuActivity) -> b
org.geometerplus.android.fbreader.network.TopupMenuActivity$1 -> org.geometerplus.android.fbreader.network.ah:
    org.geometerplus.android.fbreader.network.TopupMenuActivity this$0 -> a
    org.geometerplus.android.fbreader.api.PluginApi$MenuActionInfo val$info -> b
    void run() -> run
org.geometerplus.android.fbreader.network.Util -> org.geometerplus.android.fbreader.network.ai:
    android.content.Intent intentByLink(android.content.Intent,org.geometerplus.fbreader.network.INetworkLink) -> a
    void initLibrary(android.app.Activity) -> a
    android.content.Intent authorizationIntent(org.geometerplus.fbreader.network.INetworkLink,android.net.Uri) -> a
    android.content.Intent registrationIntent(org.geometerplus.fbreader.network.INetworkLink) -> a
    boolean isRegistrationSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runRegistrationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    void runAuthenticationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.Runnable) -> a
    void openInBrowser(android.app.Activity,java.lang.String) -> a
    void doDownloadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
    void shareBook(android.app.Activity,org.geometerplus.fbreader.library.Book) -> a
    void bindString(android.database.sqlite.SQLiteStatement,int,java.lang.String) -> a
    void bindDate(android.database.sqlite.SQLiteStatement,int,java.util.Date) -> a
    java.util.Date getDate(android.database.Cursor,int) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption BooksDirectoryOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption FontsDirectoryOption() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpapersDirectoryOption() -> c
    java.lang.String cacheDirectory() -> d
    java.lang.String networkCacheDirectory() -> e
    int decompress(java.io.InputStream,byte[],int) -> a
    void skip(java.io.InputStream,int) -> a
    int readShort(java.io.InputStream) -> a
    long readInt(java.io.InputStream) -> b
    java.lang.CharSequence getHtmlText(java.lang.String) -> a
    java.util.List encodings() -> f
    byte[] createCopy(byte[],int,int) -> a
    char[] createCopy(char[],int,int) -> a
    int[] createCopy(int[],int,int) -> a
    java.lang.String[] createCopy(java.lang.String[],int,int) -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    boolean matchesIgnoreCase(java.lang.String,java.lang.String) -> a
    java.lang.String listToString(java.util.List,java.lang.String) -> a
    int rgb(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getAverageColor(android.graphics.Bitmap) -> a
org.geometerplus.android.fbreader.network.Util$1 -> org.geometerplus.android.fbreader.network.aj:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.Action -> org.geometerplus.android.fbreader.network.a.a:
    int Code -> a
    int IconId -> b
    android.app.Activity myActivity -> c
    java.lang.String myResourceKey -> d
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
    java.lang.String getOptionsLabel(org.geometerplus.fbreader.network.NetworkTree) -> e
    boolean useFullReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean useDemoReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    int getBookStatus(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    java.util.List getContextMenuActions(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    void doReadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
    void tryToDeleteBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> b
    boolean access$0(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkBookTree,int) -> a
org.geometerplus.android.fbreader.network.action.AddCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.b:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.BookAction -> org.geometerplus.android.fbreader.network.a.c:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.BuyBasketBooksAction -> org.geometerplus.android.fbreader.network.a.d:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.CatalogAction -> org.geometerplus.android.fbreader.network.a.e:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.ClearBasketAction -> org.geometerplus.android.fbreader.network.a.f:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.EditCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.g:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.LanguageFilterAction -> org.geometerplus.android.fbreader.network.a.h:
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.LanguageFilterAction$1 -> org.geometerplus.android.fbreader.network.a.i:
    boolean[] val$checked -> a
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
org.geometerplus.android.fbreader.network.action.LanguageFilterAction$2 -> org.geometerplus.android.fbreader.network.a.j:
    boolean[] val$checked -> a
    java.util.List val$allLanguageCodes -> b
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.NetworkBookActions$1 -> org.geometerplus.android.fbreader.network.a.k:
    boolean val$demo -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.NetworkBookActions$NBAction -> org.geometerplus.android.fbreader.network.a.l:
    int myId -> d
    java.lang.String myArg -> e
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.OpenCatalogAction -> org.geometerplus.android.fbreader.network.a.m:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    void doOpenTree(org.geometerplus.fbreader.network.NetworkTree) -> f
    void doLoadCatalog(org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void access$0(org.geometerplus.android.fbreader.network.action.OpenCatalogAction,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void access$1(org.geometerplus.android.fbreader.network.action.OpenCatalogAction,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.OpenCatalogAction$1 -> org.geometerplus.android.fbreader.network.a.n:
    org.geometerplus.android.fbreader.network.action.OpenCatalogAction this$0 -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.OpenCatalogAction$2 -> org.geometerplus.android.fbreader.network.a.o:
    org.geometerplus.android.fbreader.network.action.OpenCatalogAction this$0 -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.OpenInBrowserAction -> org.geometerplus.android.fbreader.network.a.p:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.OpenInBrowserAction$1 -> org.geometerplus.android.fbreader.network.a.q:
    org.geometerplus.android.fbreader.network.action.OpenInBrowserAction this$0 -> a
    java.lang.String val$url -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.action.RefreshRootCatalogAction -> org.geometerplus.android.fbreader.network.a.r:
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.ReloadCatalogAction -> org.geometerplus.android.fbreader.network.a.s:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.RemoveCustomCatalogAction -> org.geometerplus.android.fbreader.network.a.t:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.RootAction -> org.geometerplus.android.fbreader.network.a.u:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.RunSearchAction -> org.geometerplus.android.fbreader.network.a.v:
    boolean myFromContextMenu -> d
    org.geometerplus.fbreader.network.tree.SearchCatalogTree getSearchTree(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isEnabled(org.geometerplus.fbreader.network.NetworkTree) -> b
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction -> org.geometerplus.android.fbreader.network.a.w:
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    void showBookInfo(org.geometerplus.fbreader.network.NetworkTree) -> f
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void access$1(org.geometerplus.android.fbreader.network.action.ShowBookInfoAction,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1 -> org.geometerplus.android.fbreader.network.a.x:
    org.geometerplus.android.fbreader.network.action.ShowBookInfoAction this$0 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1$1 -> org.geometerplus.android.fbreader.network.a.y:
    org.geometerplus.android.fbreader.network.action.ShowBookInfoAction$1 this$1 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignInAction -> org.geometerplus.android.fbreader.network.a.z:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.SignOutAction -> org.geometerplus.android.fbreader.network.a.A:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getOptionsLabel(org.geometerplus.fbreader.network.NetworkTree) -> e
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
org.geometerplus.android.fbreader.network.action.SignOutAction$1 -> org.geometerplus.android.fbreader.network.a.B:
    org.geometerplus.android.fbreader.network.action.SignOutAction this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignOutAction$1$1 -> org.geometerplus.android.fbreader.network.a.C:
    void run() -> run
org.geometerplus.android.fbreader.network.action.SignUpAction -> org.geometerplus.android.fbreader.network.a.D:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
org.geometerplus.android.fbreader.network.action.TopupAction -> org.geometerplus.android.fbreader.network.a.E:
    boolean isVisible(org.geometerplus.fbreader.network.NetworkTree) -> a
    void run(org.geometerplus.fbreader.network.NetworkTree) -> c
    java.lang.String getContextLabel(org.geometerplus.fbreader.network.NetworkTree) -> d
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference -> org.geometerplus.android.fbreader.preferences.a:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    android.widget.SeekBar mySlider -> c
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    android.widget.SeekBar access$0(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource access$1(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> b
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.b:
    android.graphics.drawable.Drawable myBase -> a
    android.graphics.Paint myPaint -> b
    android.graphics.Paint myOutlinePaint -> c
    org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference this$0 -> d
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.BatteryLevelToTurnScreenOffPreference -> org.geometerplus.android.fbreader.preferences.c:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.BookTitlePreference -> org.geometerplus.android.fbreader.preferences.d:
    org.geometerplus.fbreader.library.Book myBook -> a
    void setValue(java.lang.String) -> a
org.geometerplus.android.fbreader.preferences.DictionaryPreference -> org.geometerplus.android.fbreader.preferences.e:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.EditBookInfoActivity -> org.geometerplus.android.fbreader.preferences.EditBookInfoActivity:
    org.geometerplus.fbreader.library.Book myBook -> c
    void init(android.content.Intent) -> a
    void onPause() -> onPause
    android.preference.Preference addPreference(android.preference.Preference) -> a
org.geometerplus.android.fbreader.preferences.EncodingPreference -> org.geometerplus.android.fbreader.preferences.f:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.EncodingPreference$1 -> org.geometerplus.android.fbreader.preferences.g:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.android.fbreader.preferences.FontOption -> org.geometerplus.android.fbreader.preferences.h:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    java.lang.String UNCHANGED -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.FontStylePreference -> org.geometerplus.android.fbreader.preferences.i:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myBoldOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myItalicOption -> b
    java.lang.String[] myValues -> c
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.InfoPreference -> org.geometerplus.android.fbreader.preferences.j:
org.geometerplus.android.fbreader.preferences.LanguagePreference -> org.geometerplus.android.fbreader.preferences.k:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity -> org.geometerplus.android.fbreader.preferences.l:
    void init(android.content.Intent) -> a
    android.preference.Preference addPreference(android.preference.Preference) -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$1 -> org.geometerplus.android.fbreader.preferences.m:
    int myLevel -> a
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary val$androidLibrary -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$2 -> org.geometerplus.android.fbreader.preferences.n:
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$bgPreferences -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$3 -> org.geometerplus.android.fbreader.preferences.o:
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$footerPreferences -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$4 -> org.geometerplus.android.fbreader.preferences.p:
    org.geometerplus.zlibrary.core.application.ZLKeyBindings val$keyBindings -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$volumeKeysPreferences -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$5 -> org.geometerplus.android.fbreader.preferences.q:
    org.geometerplus.zlibrary.core.application.ZLKeyBindings val$keyBindings -> a
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.SunReaderPreference -> org.geometerplus.android.fbreader.preferences.SunReaderPreference:
    org.geometerplus.fbreader.fbreader.FBReaderApp fbReader -> a
    org.geometerplus.fbreader.fbreader.ColorProfile profile -> b
    org.geometerplus.zlibrary.text.view.ZLTextView view -> c
    org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition pagePosition -> d
    android.widget.TextView lightText -> e
    android.widget.TextView pageText -> f
    java.lang.StringBuilder tvLight -> g
    java.lang.StringBuilder tvPage -> h
    android.widget.SeekBar lightSeek -> i
    android.widget.SeekBar pageSeek -> j
    android.widget.EditText pageEdit -> k
    int pageToGo -> l
    android.widget.SeekBar$OnSeekBarChangeListener sbLis -> m
    android.widget.SeekBar$OnSeekBarChangeListener sbLis2 -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onDefaultFontsize(android.view.View) -> onDefaultFontsize
    void onFontsizeSmaller(android.view.View) -> onFontsizeSmaller
    void onFontsizeLarger(android.view.View) -> onFontsizeLarger
    void onSepiaSelected(android.view.View) -> onSepiaSelected
    void onStyleDefaultSelected(android.view.View) -> onStyleDefaultSelected
    void onWarmyellowSelected(android.view.View) -> onWarmyellowSelected
    void onGraygreenSelected(android.view.View) -> onGraygreenSelected
    void backToMain(android.view.View) -> backToMain
    void gotoSelectedPage(android.view.View) -> gotoSelectedPage
    void access$0(org.geometerplus.android.fbreader.preferences.SunReaderPreference,java.lang.StringBuilder) -> a
    android.widget.SeekBar access$1(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> a
    java.lang.StringBuilder access$2(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> b
    android.widget.TextView access$3(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> c
    void access$4(org.geometerplus.android.fbreader.preferences.SunReaderPreference,java.lang.StringBuilder) -> b
    android.widget.SeekBar access$5(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> d
    org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition access$6(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> e
    java.lang.StringBuilder access$7(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> f
    android.widget.TextView access$8(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> g
    android.widget.EditText access$9(org.geometerplus.android.fbreader.preferences.SunReaderPreference) -> h
    void access$10(org.geometerplus.android.fbreader.preferences.SunReaderPreference,int) -> a
org.geometerplus.android.fbreader.preferences.SunReaderPreference$1 -> org.geometerplus.android.fbreader.preferences.r:
    org.geometerplus.android.fbreader.preferences.SunReaderPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.SunReaderPreference$2 -> org.geometerplus.android.fbreader.preferences.s:
    org.geometerplus.android.fbreader.preferences.SunReaderPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.UrlPreference -> org.geometerplus.android.fbreader.preferences.t:
    java.lang.String myUrl -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
org.geometerplus.android.fbreader.preferences.WallpaperPreference -> org.geometerplus.android.fbreader.preferences.u:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLBoolean3Preference -> org.geometerplus.android.fbreader.preferences.v:
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option myOption -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    void onDialogClosed(boolean) -> onDialogClosed
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> a
org.geometerplus.android.fbreader.preferences.ZLBooleanPreference -> org.geometerplus.android.fbreader.preferences.w:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myOption -> a
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.ZLCheckBoxPreference -> org.geometerplus.android.fbreader.preferences.x:
org.geometerplus.android.fbreader.preferences.ZLChoicePreference -> org.geometerplus.android.fbreader.preferences.y:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    boolean $assertionsDisabled -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLColorPreference -> org.geometerplus.android.fbreader.preferences.z:
    org.geometerplus.zlibrary.core.options.ZLColorOption myOption -> a
    android.widget.SeekBar myRedSlider -> b
    android.widget.SeekBar myGreenSlider -> c
    android.widget.SeekBar myBlueSlider -> d
    android.graphics.drawable.GradientDrawable myPreviewDrawable -> e
    android.widget.SeekBar createSlider(android.view.View,int,int,java.lang.String) -> a
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    android.graphics.drawable.GradientDrawable access$0(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> a
    android.widget.SeekBar access$1(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> b
    android.widget.SeekBar access$2(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> c
    android.widget.SeekBar access$3(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> d
org.geometerplus.android.fbreader.preferences.ZLColorPreference$1 -> org.geometerplus.android.fbreader.preferences.A:
    org.geometerplus.android.fbreader.preferences.ZLColorPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.ZLColorPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.B:
    android.widget.SeekBar mySlider -> a
    android.graphics.drawable.Drawable myBase -> b
    java.lang.String myText -> c
    android.graphics.Paint myPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    boolean myLabelOnRight -> f
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.ZLEnumPreference -> org.geometerplus.android.fbreader.preferences.C:
    org.geometerplus.zlibrary.core.options.ZLEnumOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLIntegerChoicePreference -> org.geometerplus.android.fbreader.preferences.D:
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myOption -> a
    int[] myValues -> b
    boolean $assertionsDisabled -> c
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLIntegerRangePreference -> org.geometerplus.android.fbreader.preferences.E:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity -> org.geometerplus.android.fbreader.preferences.F:
    java.lang.String SCREEN_KEY -> a
    java.util.HashMap myScreenMap -> c
    android.preference.PreferenceScreen myScreen -> d
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    android.preference.Preference addPreference(android.preference.Preference) -> a
    void init(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen -> org.geometerplus.android.fbreader.preferences.G:
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    android.preference.PreferenceScreen myScreen -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity this$0 -> c
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    android.preference.Preference addPreference(android.preference.Preference) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLBooleanOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLStringOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLColorOption,java.lang.String) -> a
    android.preference.Preference addOption(org.geometerplus.zlibrary.core.options.ZLEnumOption,java.lang.String) -> a
    android.preference.PreferenceScreen access$1(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceSet -> org.geometerplus.android.fbreader.preferences.H:
    java.util.LinkedList myPreferences -> a
    void add(android.preference.Preference) -> a
    void setEnabled(boolean) -> a
org.geometerplus.android.fbreader.preferences.ZLStringChoicePreference -> org.geometerplus.android.fbreader.preferences.I:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringListPreference -> org.geometerplus.android.fbreader.preferences.J:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    boolean $assertionsDisabled -> b
    void setList(java.lang.String[]) -> a
    void setLists(java.lang.String[],java.lang.String[]) -> a
    boolean setInitialValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringOptionPreference -> org.geometerplus.android.fbreader.preferences.K:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void setValue(java.lang.String) -> a
org.geometerplus.android.fbreader.preferences.ZLStringPreference -> org.geometerplus.android.fbreader.preferences.L:
    void setValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.tips.TipsActivity -> org.geometerplus.android.fbreader.tips.TipsActivity:
    org.geometerplus.fbreader.tips.TipsManager myManager -> a
    void onCreate(android.os.Bundle) -> onCreate
    void showTip(android.widget.Button) -> a
    void showText(java.lang.CharSequence) -> a
    org.geometerplus.fbreader.tips.TipsManager access$0(org.geometerplus.android.fbreader.tips.TipsActivity) -> a
    void access$1(org.geometerplus.android.fbreader.tips.TipsActivity,android.widget.Button) -> a
org.geometerplus.android.fbreader.tips.TipsActivity$1 -> org.geometerplus.android.fbreader.tips.a:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$2 -> org.geometerplus.android.fbreader.tips.b:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$3 -> org.geometerplus.android.fbreader.tips.c:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    android.widget.CheckBox val$checkBox -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tips.TipsActivity$4 -> org.geometerplus.android.fbreader.tips.d:
    org.geometerplus.android.fbreader.tips.TipsActivity this$0 -> a
    android.widget.Button val$nextTipButton -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.tree.TreeActivity -> org.geometerplus.android.fbreader.b.a:
    org.geometerplus.fbreader.tree.FBTree myCurrentTree -> a
    org.geometerplus.fbreader.tree.FBTree$Key myCurrentKey -> b
    java.util.ArrayList myHistory -> c
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tree$FBTree$Status -> d
    void onCreate(android.os.Bundle) -> onCreate
    org.geometerplus.android.fbreader.tree.TreeAdapter getListAdapter() -> b
    org.geometerplus.fbreader.tree.FBTree getCurrentTree() -> c
    void onNewIntent(android.content.Intent) -> onNewIntent
    org.geometerplus.fbreader.tree.FBTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean isTreeInvisible(org.geometerplus.fbreader.tree.FBTree) -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void openTree(org.geometerplus.fbreader.tree.FBTree) -> c
    void onCurrentTreeChanged() -> a
    void openTree(org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> a
    void init(android.content.Intent) -> a
    void openTreeInternal(org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> b
    android.widget.ListAdapter getListAdapter() -> getListAdapter
    void access$1(org.geometerplus.android.fbreader.tree.TreeActivity,org.geometerplus.fbreader.tree.FBTree,org.geometerplus.fbreader.tree.FBTree,boolean) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$tree$FBTree$Status() -> d
org.geometerplus.android.fbreader.tree.TreeActivity$1 -> org.geometerplus.android.fbreader.b.b:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    android.content.Intent val$intent -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeActivity$2 -> org.geometerplus.android.fbreader.b.c:
    org.geometerplus.fbreader.tree.FBTree val$tree -> a
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeActivity$3 -> org.geometerplus.android.fbreader.b.d:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    org.geometerplus.fbreader.tree.FBTree val$tree -> b
    org.geometerplus.fbreader.tree.FBTree val$treeToSelect -> c
    boolean val$storeInHistory -> d
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeActivity$4 -> org.geometerplus.android.fbreader.b.e:
    org.geometerplus.android.fbreader.tree.TreeActivity this$0 -> a
    int val$index -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeAdapter -> org.geometerplus.android.fbreader.b.f:
    org.geometerplus.android.fbreader.tree.TreeActivity myActivity -> a
    java.util.List myItems -> b
    org.geometerplus.android.fbreader.tree.TreeActivity getActivity() -> a
    void remove(org.geometerplus.fbreader.tree.FBTree) -> a
    void replaceAll(java.util.Collection) -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.tree.FBTree getItem(int) -> a
    long getItemId(int) -> getItemId
    int getIndex(org.geometerplus.fbreader.tree.FBTree) -> b
    org.geometerplus.fbreader.tree.FBTree getFirstSelectedItem() -> b
    java.lang.Object getItem(int) -> getItem
    java.util.List access$1(org.geometerplus.android.fbreader.tree.TreeAdapter) -> a
org.geometerplus.android.fbreader.tree.TreeAdapter$1 -> org.geometerplus.android.fbreader.b.g:
    org.geometerplus.android.fbreader.tree.TreeAdapter this$0 -> a
    org.geometerplus.fbreader.tree.FBTree val$item -> b
    void run() -> run
org.geometerplus.android.fbreader.tree.TreeAdapter$4 -> org.geometerplus.android.fbreader.b.h:
    org.geometerplus.android.fbreader.tree.TreeAdapter this$0 -> a
    java.util.Collection val$items -> b
    void run() -> run
org.geometerplus.android.util.PackageUtil -> org.geometerplus.android.a.a:
    boolean canBeStarted(android.content.Context,android.content.Intent,boolean) -> a
    boolean installFromMarket(android.app.Activity,java.lang.String) -> a
    void runInstallPluginDialog(android.app.Activity,java.util.Map,java.lang.Runnable) -> a
org.geometerplus.android.util.PackageUtil$1 -> org.geometerplus.android.a.b:
    android.app.Activity val$activity -> a
    java.lang.String val$plugin -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.PackageUtil$2 -> org.geometerplus.android.a.c:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption val$doNotInstallOption -> a
    android.widget.CheckBox val$checkBox -> b
    java.lang.Runnable val$postRunnable -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.UIUtil -> org.geometerplus.android.a.d:
    java.lang.Object ourMonitor -> a
    android.app.ProgressDialog ourProgress -> b
    java.util.Queue ourTaskQueue -> c
    android.os.Handler ourProgressHandler -> d
    boolean init() -> e
    void wait(java.lang.String,java.lang.Runnable,android.content.Context) -> a
    void runWithMessage(android.app.Activity,java.lang.String,java.lang.Runnable,java.lang.Runnable,boolean) -> a
    void showMessageText(android.content.Context,java.lang.String) -> a
    void showErrorMessage(android.content.Context,java.lang.String) -> b
    void showErrorMessage(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.Object access$0() -> a
    java.util.Queue access$1() -> b
    android.app.ProgressDialog access$2() -> c
    void access$3(android.app.ProgressDialog) -> a
    android.os.Handler access$4() -> d
org.geometerplus.android.util.UIUtil$1 -> org.geometerplus.android.a.e:
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$2 -> org.geometerplus.android.a.f:
    android.app.ProgressDialog val$currentProgress -> a
    void run() -> run
org.geometerplus.android.util.UIUtil$3 -> org.geometerplus.android.a.g:
    android.app.Activity val$activity -> a
    java.lang.String val$message -> b
    boolean val$minPriority -> c
    java.lang.Runnable val$action -> d
    java.lang.Runnable val$postAction -> e
    void run() -> run
org.geometerplus.android.util.UIUtil$3$1 -> org.geometerplus.android.a.h:
    java.lang.Runnable val$action -> a
    android.app.Activity val$activity -> b
    android.app.ProgressDialog val$progress -> c
    java.lang.Runnable val$postAction -> d
    void run() -> run
org.geometerplus.android.util.UIUtil$3$1$1 -> org.geometerplus.android.a.i:
    android.app.ProgressDialog val$progress -> a
    java.lang.Runnable val$postAction -> b
    void run() -> run
org.geometerplus.android.util.UIUtil$Pair -> org.geometerplus.android.a.j:
    java.lang.Runnable Action -> a
    java.lang.String Message -> b
org.geometerplus.fbreader.bookmodel.BookModel -> org.geometerplus.a.a.a:
    org.geometerplus.fbreader.library.Book Book -> a
    org.geometerplus.fbreader.bookmodel.TOCTree TOCTree -> b
    org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver myResolver -> c
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$formats$FormatPlugin$Type -> d
    org.geometerplus.fbreader.bookmodel.BookModel createModel(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getTextModel() -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabelInternal(java.lang.String) -> b
    void setLabelResolver(org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabel(java.lang.String) -> c
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$formats$FormatPlugin$Type() -> b
org.geometerplus.fbreader.bookmodel.BookModel$Label -> org.geometerplus.a.a.b:
    java.lang.String ModelId -> a
    int ParagraphIndex -> b
org.geometerplus.fbreader.bookmodel.BookModel$LabelResolver -> org.geometerplus.a.a.c:
    java.util.List getCandidates(java.lang.String) -> a
org.geometerplus.fbreader.bookmodel.BookModelImpl -> org.geometerplus.a.a.d:
    org.geometerplus.zlibrary.text.model.CharStorage myInternalHyperlinks -> c
    java.util.HashMap myImageMap -> d
    java.util.HashMap myFootnotes -> e
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabelInternal(java.lang.String) -> b
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.fbreader.bookmodel.BookReader -> org.geometerplus.a.a.e:
    org.geometerplus.fbreader.bookmodel.JavaBookModel Model -> a
    org.geometerplus.zlibrary.text.model.ZLTextWritableModel myCurrentTextModel -> b
    boolean myTextParagraphExists -> c
    boolean myTextParagraphIsNonEmpty -> d
    char[] myTextBuffer -> e
    int myTextBufferLength -> f
    java.lang.StringBuilder myContentsBuffer -> g
    byte[] myKindStack -> h
    int myKindStackSize -> i
    byte myHyperlinkKind -> j
    java.lang.String myHyperlinkReference -> k
    boolean myInsideTitle -> l
    boolean mySectionContainsRegularContents -> m
    org.geometerplus.fbreader.bookmodel.TOCTree myCurrentContentsTree -> n
    java.nio.charset.CharsetDecoder myByteDecoder -> o
    byte[] myUnderflowByteBuffer -> p
    int myUnderflowLength -> q
    void setByteDecoder(java.nio.charset.CharsetDecoder) -> a
    void flushTextBufferToParagraph() -> n
    void addControl(byte,boolean) -> a
    void pushKind(byte) -> a
    boolean popKind() -> a
    void beginParagraph() -> b
    void beginParagraph(byte) -> b
    void endParagraph() -> c
    void insertEndOfSectionParagraph() -> d
    void unsetCurrentTextModel() -> e
    void enterTitle() -> f
    void exitTitle() -> g
    void setMainTextModel() -> h
    void setFootnoteTextModel(java.lang.String) -> a
    void addData(char[]) -> a
    void addData(char[],int,int,boolean) -> a
    void addByteData(byte[],int,int) -> a
    byte hyperlinkType(byte) -> c
    void addHyperlinkControl(byte,java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String) -> b
    void addHyperlinkLabel(java.lang.String,int) -> a
    void addContentsData(char[]) -> b
    void addContentsData(char[],int,int) -> a
    boolean hasContentsData() -> i
    void beginContentsParagraph(int) -> a
    void endContentsParagraph() -> j
    boolean paragraphIsOpen() -> k
    boolean paragraphIsNonEmpty() -> l
    void beginContentsParagraph() -> m
    void addImageReference(java.lang.String,boolean) -> a
    void addImageReference(java.lang.String,short,boolean) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.fbreader.bookmodel.BookReadingException -> org.geometerplus.a.a.f:
    java.lang.String getResourceText(java.lang.String) -> a
org.geometerplus.fbreader.bookmodel.JavaBookModel -> org.geometerplus.a.a.g:
    org.geometerplus.zlibrary.text.model.ZLTextModel BookTextModel -> f
    char[] myCurrentLinkBlock -> g
    int myCurrentLinkBlockOffset -> h
    org.geometerplus.zlibrary.text.model.ZLTextModel getTextModel() -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String,org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.fbreader.bookmodel.NativeBookModel -> org.geometerplus.a.a.h:
    org.geometerplus.zlibrary.text.model.ZLTextModel getTextModel() -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.fbreader.bookmodel.TOCTree -> org.geometerplus.a.a.i:
    java.lang.String myText -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference myReference -> b
    java.lang.String getText() -> a
    void setText(java.lang.String) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference getReference() -> b
    void setReference(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
org.geometerplus.fbreader.bookmodel.TOCTree$Reference -> org.geometerplus.a.a.j:
    int ParagraphIndex -> a
org.geometerplus.fbreader.fbreader.ChangeFontSizeAction -> org.geometerplus.a.b.a:
    int myDelta -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.ClearFindResultsAction -> org.geometerplus.a.b.b:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.ColorProfile -> org.geometerplus.a.b.c:
    java.util.HashMap ourProfiles -> k
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpaperOption -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption BackgroundOption -> b
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionBackgroundOption -> c
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionForegroundOption -> d
    org.geometerplus.zlibrary.core.options.ZLColorOption HighlightingOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption RegularTextOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption HyperlinkTextOption -> g
    org.geometerplus.zlibrary.core.options.ZLColorOption FooterTextOption -> h
    org.geometerplus.zlibrary.core.options.ZLColorOption VisitedHyperlinkTextOption -> i
    org.geometerplus.zlibrary.core.options.ZLColorOption FooterFillOption -> j
    org.geometerplus.fbreader.fbreader.ColorProfile get(java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption createOption(java.lang.String,java.lang.String,int,int,int) -> a
org.geometerplus.fbreader.fbreader.ExitAction -> org.geometerplus.a.b.d:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.FBAction -> org.geometerplus.a.b.e:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> b
org.geometerplus.fbreader.fbreader.FBReaderApp -> org.geometerplus.a.b.f:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AllowScreenBrightnessAdjustmentOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption TextSearchPatternOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption EnableDoubleTapOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption NavigateAllWordsOption -> d
    org.geometerplus.zlibrary.core.options.ZLEnumOption WordTappingActionOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption ImageViewBackgroundOption -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption ImageTappingActionOption -> g
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftMarginOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightMarginOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption TopMarginOption -> j
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BottomMarginOption -> k
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScrollbarTypeOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FooterHeightOption -> m
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowTOCMarksOption -> n
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowClockOption -> o
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowBatteryOption -> p
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowProgressOption -> q
    org.geometerplus.zlibrary.core.options.ZLStringOption FooterFontOption -> r
    org.geometerplus.zlibrary.core.options.ZLStringOption ColorProfileOption -> s
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowLibraryInCancelMenuOption -> t
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowNetworkLibraryInCancelMenuOption -> u
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPreviousBookInCancelMenuOption -> v
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPositionsInCancelMenuOption -> w
    org.geometerplus.zlibrary.core.application.ZLKeyBindings myBindings -> z
    org.geometerplus.fbreader.fbreader.FBView BookTextView -> x
    org.geometerplus.fbreader.fbreader.FBView FootnoteView -> A
    org.geometerplus.fbreader.bookmodel.BookModel Model -> y
    org.geometerplus.zlibrary.text.view.ZLTextPosition myJumpEndPosition -> B
    java.util.Date myJumpTimeStamp -> C
    org.geometerplus.fbreader.fbreader.ColorProfile myColorProfile -> D
    java.util.ArrayList myCancelActionsList -> E
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType -> F
    void openBook(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark,java.lang.Runnable) -> a
    void reloadBook() -> a
    org.geometerplus.fbreader.fbreader.ColorProfile getColorProfile() -> b
    void setColorProfileName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> c
    void tryOpenFootnote(java.lang.String) -> b
    void clearTextCaches() -> d
    void openBookInternal(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> a
    boolean jumpBack() -> e
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void showBookTextView() -> f
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.Runnable) -> a
    void onWindowClosing() -> g
    java.util.List getCancelActionsList() -> h
    void runCancelAction(int) -> a
    void updateInvisibleBookmarksList(org.geometerplus.fbreader.library.Bookmark) -> c
    void updateAllBookmarksList(org.geometerplus.fbreader.library.Bookmark) -> b
    void addInvisibleBookmark(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void addInvisibleBookmark() -> i
    org.geometerplus.fbreader.library.Bookmark addBookmark(int,boolean) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree getCurrentTOCElement() -> j
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType() -> x
org.geometerplus.fbreader.fbreader.FBReaderApp$1 -> org.geometerplus.a.b.g:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    org.geometerplus.fbreader.library.Bookmark val$bookmark -> c
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$2 -> org.geometerplus.a.b.h:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$BookmarkDescription -> org.geometerplus.a.b.i:
    org.geometerplus.fbreader.library.Bookmark Bookmark -> a
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionDescription -> org.geometerplus.a.b.j:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType Type -> b
    java.lang.String Title -> c
    java.lang.String Summary -> d
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType -> org.geometerplus.a.b.k:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType library -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType networkLibrary -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType previousBook -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType returnTo -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType close -> e
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] ENUM$VALUES -> f
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] values() -> a
org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction -> org.geometerplus.a.b.l:
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction selectImage -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction openImageView -> b
org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction -> org.geometerplus.a.b.m:
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction selectSingleWord -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction startSelecting -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction openDictionary -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] ENUM$VALUES -> e
    org.geometerplus.fbreader.fbreader.FBReaderApp$WordTappingAction[] values() -> a
org.geometerplus.fbreader.fbreader.FBView -> org.geometerplus.a.b.n:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> d
    int myStartY -> e
    boolean myIsBrightnessAdjustmentInProgress -> f
    int myStartBrightness -> g
    org.geometerplus.fbreader.fbreader.TapZoneMap myZoneMap -> h
    org.geometerplus.fbreader.fbreader.FBView$Footer myFooter -> i
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$WordTappingAction -> j
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    boolean onFingerSingleTap(int,int) -> a
    boolean isDoubleTapSupported() -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean onFingerPress(int,int) -> c
    boolean isFlickScrollingEnabled() -> Y
    void startManualScrolling(int,int) -> l
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onTrackballRotated(int,int) -> i
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode getWallpaperMode() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> j
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> k
    void releaseSelectionCursor() -> l
    java.lang.String getSelectedText() -> m
    int scrollbarType() -> n
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> o
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> p
    org.geometerplus.fbreader.fbreader.FBReaderApp access$1(org.geometerplus.fbreader.fbreader.FBView) -> a
    int access$2(org.geometerplus.fbreader.fbreader.FBView) -> b
    int access$3(org.geometerplus.fbreader.fbreader.FBView,int) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$WordTappingAction() -> Z
org.geometerplus.fbreader.fbreader.FBView$Footer -> org.geometerplus.a.b.o:
    java.lang.Runnable UpdateTask -> b
    java.util.ArrayList myTOCMarks -> c
    int myGaugeWidth -> d
    org.geometerplus.fbreader.fbreader.FBView this$0 -> a
    int getHeight() -> a
    void resetTOCMarks() -> b
    void updateTOCMarks(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.Runnable access$1(org.geometerplus.fbreader.fbreader.FBView$Footer) -> a
org.geometerplus.fbreader.fbreader.FBView$Footer$1 -> org.geometerplus.a.b.p:
    org.geometerplus.fbreader.fbreader.FBView$Footer this$1 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FindNextAction -> org.geometerplus.a.b.q:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.FindPreviousAction -> org.geometerplus.a.b.r:
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.MoveCursorAction -> org.geometerplus.a.b.s:
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> c
    void run(java.lang.Object[]) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> d
org.geometerplus.fbreader.fbreader.ScrollingPreferences -> org.geometerplus.a.b.t:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences ourInstance -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption FingerScrollingOption -> a
    org.geometerplus.zlibrary.core.options.ZLEnumOption AnimationOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AnimationSpeedOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption HorizontalOption -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption TapZoneMapOption -> e
    org.geometerplus.fbreader.fbreader.ScrollingPreferences Instance() -> a
org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling -> org.geometerplus.a.b.u:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTap -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byFlick -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTapAndFlick -> c
org.geometerplus.fbreader.fbreader.SelectionClearAction -> org.geometerplus.a.b.v:
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.SwitchProfileAction -> org.geometerplus.a.b.w:
    java.lang.String myProfileName -> a
    boolean isVisible() -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap -> org.geometerplus.a.b.x:
    java.util.List ourPredefinedMaps -> b
    org.geometerplus.zlibrary.core.options.ZLStringListOption ourMapsOption -> c
    java.util.Map ourMaps -> d
    java.lang.String Name -> a
    java.lang.String myOptionGroupName -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myHeight -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myWidth -> g
    java.util.HashMap myZoneMap -> h
    java.util.HashMap myZoneMap2 -> i
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap -> j
    java.util.List zoneMapNames() -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap zoneMap(java.lang.String) -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap createZoneMap(java.lang.String,int,int) -> a
    void deleteZoneMap(java.lang.String) -> b
    boolean isCustom() -> b
    int getHeight() -> c
    int getWidth() -> d
    java.lang.String getActionByCoordinates(int,int,int,int,org.geometerplus.fbreader.fbreader.TapZoneMap$Tap) -> a
    java.lang.String getActionByZone(int,int,org.geometerplus.fbreader.fbreader.TapZoneMap$Tap) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption createOptionForZone(org.geometerplus.fbreader.fbreader.TapZoneMap$Zone,boolean,java.lang.String) -> a
    void setActionForZone(int,int,boolean,java.lang.String) -> a
    java.util.HashMap access$0(org.geometerplus.fbreader.fbreader.TapZoneMap) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption access$1(org.geometerplus.fbreader.fbreader.TapZoneMap,org.geometerplus.fbreader.fbreader.TapZoneMap$Zone,boolean,java.lang.String) -> a
    java.util.HashMap access$2(org.geometerplus.fbreader.fbreader.TapZoneMap) -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption access$3(org.geometerplus.fbreader.fbreader.TapZoneMap) -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption access$4(org.geometerplus.fbreader.fbreader.TapZoneMap) -> d
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap() -> e
org.geometerplus.fbreader.fbreader.TapZoneMap$Reader -> org.geometerplus.a.b.y:
    org.geometerplus.fbreader.fbreader.TapZoneMap this$0 -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Tap -> org.geometerplus.a.b.z:
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleTap -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleNotDoubleTap -> b
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap doubleTap -> c
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] values() -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Zone -> org.geometerplus.a.b.A:
    int HIndex -> a
    int VIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.fbreader.TextBuildTraverser -> org.geometerplus.a.b.B:
    java.lang.StringBuilder myBuffer -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    java.lang.String getText() -> c
org.geometerplus.fbreader.fbreader.TurnPageAction -> org.geometerplus.a.b.C:
    boolean myForward -> a
    boolean isEnabled() -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.VolumeKeyTurnPageAction -> org.geometerplus.a.b.D:
    boolean myForward -> a
    void run(java.lang.Object[]) -> a
org.geometerplus.fbreader.fbreader.WordCountTraverser -> org.geometerplus.a.b.E:
    int myCount -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    int getCount() -> c
org.geometerplus.fbreader.filetype.FileType -> org.geometerplus.a.c.a:
    java.lang.String Id -> a
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.util.MimeType simplifiedMimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.filetype.FileTypeCollection -> org.geometerplus.a.c.b:
    org.geometerplus.fbreader.filetype.FileTypeCollection Instance -> a
    java.util.TreeMap myTypes -> b
    void addType(org.geometerplus.fbreader.filetype.FileType) -> a
    org.geometerplus.fbreader.filetype.FileType typeForFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType simplifiedMimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.filetype.FileTypeDjVu -> org.geometerplus.a.c.c:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.filetype.FileTypeEpub -> org.geometerplus.a.c.d:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.util.MimeType simplifiedMimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.filetype.FileTypeFB2 -> org.geometerplus.a.c.e:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.util.MimeType simplifiedMimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.filetype.FileTypeHtml -> org.geometerplus.a.c.f:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.filetype.FileTypeMobipocket -> org.geometerplus.a.c.g:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.filetype.FileTypePalm -> org.geometerplus.a.c.h:
    java.lang.String myPalmId -> b
    java.lang.String palmFileType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.filetype.SimpleFileType -> org.geometerplus.a.c.i:
    java.lang.String myExtension -> b
    java.util.List myMimeTypes -> c
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
org.geometerplus.fbreader.formats.FormatPlugin -> org.geometerplus.a.d.a:
    java.lang.String myFileType -> a
    java.lang.String supportedFileType() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile realBookFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    void readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    void detectLanguageAndEncoding(org.geometerplus.fbreader.library.Book) -> b
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    org.geometerplus.fbreader.formats.FormatPlugin$Type type() -> b
    org.geometerplus.android.fbreader.network.Util supportedEncodings$4b9bb5d2() -> c
org.geometerplus.fbreader.formats.FormatPlugin$Type -> org.geometerplus.a.d.b:
    org.geometerplus.fbreader.formats.FormatPlugin$Type ANY -> a
    org.geometerplus.fbreader.formats.FormatPlugin$Type JAVA -> b
    org.geometerplus.fbreader.formats.FormatPlugin$Type NATIVE -> c
    org.geometerplus.fbreader.formats.FormatPlugin$Type EXTERNAL -> d
    org.geometerplus.fbreader.formats.FormatPlugin$Type NONE -> e
    org.geometerplus.fbreader.formats.FormatPlugin$Type[] ENUM$VALUES -> f
    org.geometerplus.fbreader.formats.FormatPlugin$Type[] values() -> a
org.geometerplus.fbreader.formats.JavaFormatPlugin -> org.geometerplus.a.d.c:
    org.geometerplus.fbreader.formats.FormatPlugin$Type type() -> b
org.geometerplus.fbreader.formats.NativeFormatPlugin -> org.geometerplus.a.d.d:
    void readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readMetaInfoNative(org.geometerplus.fbreader.library.Book) -> c
    void detectLanguageAndEncoding(org.geometerplus.fbreader.library.Book) -> b
    void readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    boolean readModelNative(org.geometerplus.fbreader.bookmodel.BookModel) -> b
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    void readCoverInternal(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.zlibrary.core.image.ZLImage[]) -> a
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    org.geometerplus.fbreader.formats.FormatPlugin$Type type() -> b
    org.geometerplus.android.fbreader.network.Util supportedEncodings$4b9bb5d2() -> c
org.geometerplus.fbreader.formats.NativeFormatPlugin$1 -> org.geometerplus.a.d.e:
    org.geometerplus.fbreader.formats.NativeFormatPlugin this$0 -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> b
    int sourceType() -> a
    java.lang.String getId() -> b
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
org.geometerplus.fbreader.formats.PluginCollection -> org.geometerplus.a.d.f:
    org.geometerplus.fbreader.formats.PluginCollection ourInstance -> a
    java.util.Map myPlugins -> b
    org.geometerplus.fbreader.formats.PluginCollection Instance() -> a
    void addPlugin(org.geometerplus.fbreader.formats.FormatPlugin) -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.formats.FormatPlugin$Type) -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.fbreader.filetype.FileType,org.geometerplus.fbreader.formats.FormatPlugin$Type) -> a
    org.geometerplus.fbreader.formats.NativeFormatPlugin[] nativePlugins() -> b
    void free() -> c
    void finalize() -> finalize
org.geometerplus.fbreader.formats.fb2.Base64EncodedImage -> org.geometerplus.a.d.a.a:
    int ourCounter -> a
    java.lang.String myDirName -> b
    int myFileNumber -> c
    java.lang.String myNamePostfix -> d
    java.io.OutputStreamWriter myStreamWriter -> e
    void resetCounter() -> a
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    void addData(char[],int,int) -> a
    void close() -> d
org.geometerplus.fbreader.formats.fb2.FB2AnnotationReader -> org.geometerplus.a.d.a.b:
    int myReadState -> a
    java.lang.StringBuilder myBuffer -> b
    boolean dontCacheAttributeValues() -> a
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean readDocument(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
org.geometerplus.fbreader.formats.fb2.FB2CoverImage -> org.geometerplus.a.d.a.c:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    int sourceType() -> a
    java.lang.String getId() -> b
org.geometerplus.fbreader.formats.fb2.FB2CoverImage$BackgroundReader -> org.geometerplus.a.d.a.d:
    boolean myReadCoverPage -> a
    java.lang.String myImageReference -> b
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myImage -> c
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverReader -> org.geometerplus.a.d.a.e:
org.geometerplus.fbreader.formats.fb2.FB2MetaInfoReader -> org.geometerplus.a.d.a.f:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myReadState -> b
    java.lang.String[] myAuthorNames -> c
    java.lang.StringBuilder myBuffer -> d
    boolean dontCacheAttributeValues() -> a
    void readMetaInfo() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2Plugin -> org.geometerplus.a.d.a.g:
    org.geometerplus.zlibrary.core.filesystem.ZLFile realBookFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    void readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void detectLanguageAndEncoding(org.geometerplus.fbreader.library.Book) -> b
    org.geometerplus.android.fbreader.network.Util supportedEncodings$4b9bb5d2() -> c
org.geometerplus.fbreader.formats.fb2.FB2Reader -> org.geometerplus.a.d.a.h:
    org.geometerplus.fbreader.bookmodel.BookReader myBookReader -> a
    boolean myInsidePoem -> b
    boolean myInsideTitle -> c
    int myBodyCounter -> d
    boolean myReadMainText -> e
    int mySectionDepth -> f
    boolean mySectionStarted -> g
    byte myHyperlinkType -> h
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myCurrentImage -> i
    boolean myInsideCoverpage -> j
    java.lang.String myCoverImageReference -> k
    int myParagraphsBeforeBodyNumber -> l
    char[] SPACE -> m
    byte[] myTagStack -> n
    int myTagStackSize -> o
    int myFootnoteIdDepth -> p
    void readBook() -> c
    boolean dontCacheAttributeValues() -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean endElementHandler(java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processNamespaces() -> b
    void collectExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.fbreader.formats.fb2.FB2Tag -> org.geometerplus.a.d.a.i:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager -> org.geometerplus.a.d.a.j:
    java.util.HashMap ourMap -> a
    java.util.ArrayList humanReadableTags(java.lang.String) -> a
    java.util.HashMap access$0() -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager$FB2TagInfoReader -> org.geometerplus.a.d.a.k:
    java.lang.String myLanguage -> a
    org.geometerplus.fbreader.library.Tag myCategoryTag -> b
    org.geometerplus.fbreader.library.Tag mySubCategoryTag -> c
    java.util.ArrayList myGenreIds -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.html.HtmlReader -> org.geometerplus.a.d.b.a:
    byte[] myStyleTable -> c
    java.nio.charset.CharsetDecoder myAttributeDecoder -> b
    boolean myInsideTitle -> d
    boolean mySectionStarted -> e
    byte myHyperlinkType -> f
    char[] SPACE -> g
    java.lang.String myHrefAttribute -> h
    boolean myOrderedListIsStarted -> i
    int myOLCounter -> j
    byte[] myControls -> k
    byte myControlsNumber -> l
    java.util.HashMap myEntityMap -> m
    java.nio.charset.CharsetDecoder createDecoder() -> n
    java.io.InputStream getInputStream() -> o
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> c
    void openControl(byte) -> d
    void closeControl(byte) -> e
    void startNewParagraph() -> r
    void endElementHandler(java.lang.String) -> d
    void endElementHandler(byte) -> c
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
org.geometerplus.fbreader.formats.html.HtmlTag -> org.geometerplus.a.d.b.b:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.ContainerFileReader -> org.geometerplus.a.d.c.a:
    java.lang.String myRootPath -> a
    java.lang.String getRootPath() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.NCXReader -> org.geometerplus.a.d.c.b:
    java.util.TreeMap myNavigationMap -> a
    java.util.ArrayList myPointStack -> b
    int myReadState -> c
    int myPlayIndex -> d
    java.lang.String myLocalPathPrefix -> e
    void readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Map navigationMap() -> c
    int atoi(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.NCXReader$NavPoint -> org.geometerplus.a.d.c.c:
    int Order -> a
    int Level -> b
    java.lang.String Text -> c
    java.lang.String ContentHRef -> d
org.geometerplus.fbreader.formats.oeb.OEBAnnotationReader -> org.geometerplus.a.d.c.d:
    int myReadState -> a
    java.lang.StringBuilder myBuffer -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader -> org.geometerplus.a.d.c.e:
    char[] Dots -> a
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> b
    java.util.HashMap myIdToHref -> c
    java.util.ArrayList myHtmlFileNames -> d
    java.util.ArrayList myTourTOC -> e
    java.util.ArrayList myGuideTOC -> f
    java.lang.String myOPFSchemePrefix -> g
    java.lang.String myFilePrefix -> h
    java.lang.String myNCXTOCFileName -> i
    java.lang.String myCoverFileName -> j
    java.util.HashMap myFileNumbers -> k
    java.util.HashMap myTOCLabels -> l
    int myState -> m
    void readBook(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getTOCLabel(java.lang.String) -> b
    void generateTOC() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean dontCacheAttributeValues() -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader$1 -> org.geometerplus.a.d.c.f:
    java.util.List getCandidates(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader -> org.geometerplus.a.d.c.g:
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> a
    java.lang.String myPathPrefix -> b
    int myReadState -> c
    java.lang.String myCoverId -> d
    org.geometerplus.zlibrary.core.image.ZLFileImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage imageByHref(java.lang.String) -> b
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverReader -> org.geometerplus.a.d.c.h:
org.geometerplus.fbreader.formats.oeb.OEBCoverReader$OEBCoverImage -> org.geometerplus.a.d.c.i:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    int sourceType() -> a
    java.lang.String getId() -> b
org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader -> org.geometerplus.a.d.c.j:
    org.geometerplus.fbreader.library.Book myBook -> a
    java.lang.String mySeriesTitle -> b
    java.lang.String mySeriesIndex -> c
    java.util.ArrayList myAuthorList -> d
    java.util.ArrayList myAuthorList2 -> e
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState myReadState -> f
    java.lang.StringBuilder myBuffer -> g
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$formats$oeb$OEBMetaInfoReader$ReadState -> h
    void readMetaInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean testDCTag(java.lang.String,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$formats$oeb$OEBMetaInfoReader$ReadState() -> c
org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState -> org.geometerplus.a.d.c.k:
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Nothing -> a
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Metadata -> b
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Author -> c
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Author2 -> d
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Title -> e
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Subject -> f
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState Language -> g
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState[] ENUM$VALUES -> h
    org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader$ReadState[] values() -> a
org.geometerplus.fbreader.formats.oeb.OEBPlugin -> org.geometerplus.a.d.c.l:
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    void readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    void readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void detectLanguageAndEncoding(org.geometerplus.fbreader.library.Book) -> b
    org.geometerplus.android.fbreader.network.Util supportedEncodings$4b9bb5d2() -> c
org.geometerplus.fbreader.formats.oeb.Reference -> org.geometerplus.a.d.c.m:
    java.lang.String Title -> a
    java.lang.String HRef -> b
org.geometerplus.fbreader.formats.oeb.XHTMLImageFinder -> org.geometerplus.a.d.c.n:
    java.lang.String myXHTMLPathPrefix -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> b
    org.geometerplus.zlibrary.core.image.ZLFileImage getCoverImage(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.pdb.MobipocketHtmlBookReader -> org.geometerplus.a.d.d.a:
    java.nio.charset.CharsetDecoder myTocDecoder -> c
    org.geometerplus.fbreader.formats.pdb.MobipocketStream myMobipocketStream -> d
    boolean myReadGuide -> e
    int myTocStartOffset -> f
    int myTocEndOffset -> g
    java.util.TreeMap myTocEntries -> h
    java.util.TreeMap myPositionToParagraph -> i
    java.util.TreeSet myFileposReferences -> j
    int myCurrentTocPosition -> k
    org.geometerplus.zlibrary.core.html.ZLByteBuffer myTocBuffer -> l
    java.io.InputStream getInputStream() -> o
    boolean tocRangeContainsPosition(int) -> b
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(byte) -> c
    void byteDataHandler(byte[],int,int) -> b
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
org.geometerplus.fbreader.formats.pdb.MobipocketPlugin -> org.geometerplus.a.d.d.b:
    void readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    void readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.image.ZLSingleImage readCoverInternal(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void detectLanguageAndEncoding(org.geometerplus.fbreader.library.Book) -> b
    org.geometerplus.android.fbreader.network.Util supportedEncodings$4b9bb5d2() -> c
    org.geometerplus.zlibrary.core.image.ZLSingleImage access$1(org.geometerplus.fbreader.formats.pdb.MobipocketPlugin,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.pdb.MobipocketPlugin$1 -> org.geometerplus.a.d.d.c:
    org.geometerplus.fbreader.formats.pdb.MobipocketPlugin this$0 -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> b
    java.lang.String getId() -> b
    int sourceType() -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
org.geometerplus.fbreader.formats.pdb.MobipocketStream -> org.geometerplus.a.d.d.d:
    int myFileSize -> i
    int myImageStartIndex -> j
    int getImageOffset(int) -> a
    int getImageLength(int) -> b
org.geometerplus.fbreader.formats.pdb.PalmDocLikeStream -> org.geometerplus.a.d.d.e:
    int myMaxRecordIndex -> a
    int myRecordIndex -> b
    int myCompressionType -> c
    long myFileSize -> i
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbHeader -> org.geometerplus.a.d.d.f:
    int[] Offsets -> a
    int length() -> a
org.geometerplus.fbreader.formats.pdb.PdbStream -> org.geometerplus.a.d.d.g:
    org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset myBase -> d
    org.geometerplus.fbreader.formats.pdb.PdbHeader myHeader -> e
    byte[] myBuffer -> f
    short myBufferLength -> g
    short myBufferOffset -> h
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLReader -> org.geometerplus.a.d.e.a:
    java.util.HashMap ourTagActions -> e
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction ourNullAction -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    java.lang.String myPathPrefix -> a
    java.lang.String myLocalPathPrefix -> h
    java.lang.String myReferencePrefix -> b
    boolean myPreformatted -> c
    boolean myInsideBody -> d
    java.util.Map myFileNumbers -> i
    java.util.Map myLocalFileNumbers -> j
    java.util.HashMap myActions -> k
    java.util.ArrayList ourExternalDTDs -> l
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction addAction(java.lang.String,org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction) -> a
    org.geometerplus.fbreader.bookmodel.BookReader getModelReader() -> c
    java.lang.String getLocalFileAlias(java.lang.String) -> b
    java.lang.String getFileAlias(java.lang.String) -> c
    void readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction getTagAction(java.lang.String) -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    java.util.List xhtmlDTDs() -> e
    java.util.List externalDTDs() -> d
    boolean dontCacheAttributeValues() -> a
    boolean processNamespaces() -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLReader$1 -> org.geometerplus.a.d.e.b:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction -> org.geometerplus.a.d.e.c:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagBodyAction -> org.geometerplus.a.d.e.d:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagControlAction -> org.geometerplus.a.d.e.e:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagHyperlinkAction -> org.geometerplus.a.d.e.f:
    byte[] myHyperlinkStack -> a
    int myHyperlinkStackSize -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagImageAction -> org.geometerplus.a.d.e.g:
    java.lang.String myNamespace -> a
    java.lang.String myNameAttribute -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagItemAction -> org.geometerplus.a.d.e.h:
    char[] BULLET -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphAction -> org.geometerplus.a.d.e.i:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphWithControlAction -> org.geometerplus.a.d.e.j:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagPreAction -> org.geometerplus.a.d.e.k:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagRestartParagraphAction -> org.geometerplus.a.d.e.l:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.library.AbstractLibrary -> org.geometerplus.a.e.a:
    java.util.List myListeners -> a
    void addChangeListener(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener) -> a
    void removeChangeListener(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener) -> b
    void fireModelChangedEvent(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code) -> a
    boolean isUpToDate() -> a
    org.geometerplus.zlibrary.core.image.ZLImage getCover(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String getAnnotation(org.geometerplus.fbreader.library.Book) -> b
org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener -> org.geometerplus.a.e.b:
    void onLibraryChanged(org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code) -> a
org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code -> org.geometerplus.a.e.c:
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code BookAdded -> a
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code BookRemoved -> b
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code StatusChanged -> c
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code Found -> d
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code NotFound -> e
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code[] ENUM$VALUES -> f
    org.geometerplus.fbreader.library.AbstractLibrary$ChangeListener$Code[] values() -> a
org.geometerplus.fbreader.library.Author -> org.geometerplus.a.e.d:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.AuthorTree -> org.geometerplus.a.e.e:
    org.geometerplus.fbreader.library.Author Author -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    java.lang.String getSortKey() -> c
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.library.Book -> org.geometerplus.a.e.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile File -> a
    long myId -> b
    java.lang.String myEncoding -> c
    java.lang.String myLanguage -> d
    java.lang.String myTitle -> e
    java.util.List myAuthors -> f
    java.util.List myTags -> g
    org.geometerplus.fbreader.library.SeriesInfo mySeriesInfo -> h
    boolean myIsSaved -> i
    java.lang.ref.WeakReference NULL_IMAGE -> j
    java.lang.ref.WeakReference myCover -> k
    java.util.Set myVisitedHyperlinks -> l
    org.geometerplus.fbreader.library.Book getById(long) -> a
    org.geometerplus.fbreader.library.Book getByFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void reloadInfoFromFile() -> a
    void reloadInfoFromDatabase() -> b
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin() -> c
    void readMetaInfo() -> d
    void readMetaInfo(org.geometerplus.fbreader.formats.FormatPlugin) -> a
    void loadLists() -> q
    java.util.List authors() -> e
    void addAuthorWithNoCheck(org.geometerplus.fbreader.library.Author) -> a
    void addAuthor(java.lang.String) -> a
    void addAuthor(java.lang.String,java.lang.String) -> a
    long getId() -> f
    java.lang.String getTitle() -> g
    void setTitle(java.lang.String) -> b
    org.geometerplus.fbreader.library.SeriesInfo getSeriesInfo() -> h
    void setSeriesInfoWithNoCheck(java.lang.String,java.math.BigDecimal) -> a
    void setSeriesInfo(java.lang.String,java.lang.String) -> b
    java.lang.String getLanguage() -> i
    void setLanguage(java.lang.String) -> c
    java.lang.String getEncoding() -> j
    void setEncoding(java.lang.String) -> d
    java.util.List tags() -> k
    void addTagWithNoCheck(org.geometerplus.fbreader.library.Tag) -> a
    void addTag(org.geometerplus.fbreader.library.Tag) -> b
    void addTag(java.lang.String) -> e
    boolean matches(java.lang.String) -> f
    boolean save() -> l
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition() -> m
    void storePosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void initHyperlinkSet() -> r
    boolean isHyperlinkVisited(java.lang.String) -> g
    void markHyperlinkAsVisited(java.lang.String) -> h
    void insertIntoBookList() -> n
    java.lang.String getContentHashCode() -> o
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> p
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    long access$0(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String access$1(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String access$2(org.geometerplus.fbreader.library.Book) -> c
    java.lang.String access$3(org.geometerplus.fbreader.library.Book) -> d
    void access$4(org.geometerplus.fbreader.library.Book,long) -> a
    void access$5(org.geometerplus.fbreader.library.Book) -> e
    org.geometerplus.fbreader.library.SeriesInfo access$6(org.geometerplus.fbreader.library.Book) -> f
org.geometerplus.fbreader.library.Book$1 -> org.geometerplus.a.e.g:
    org.geometerplus.fbreader.library.Book this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.BookInSeriesTree -> org.geometerplus.a.e.h:
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.BookTree -> org.geometerplus.a.e.i:
    org.geometerplus.fbreader.library.Book Book -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    org.geometerplus.fbreader.library.Book getBook() -> d
    java.lang.String getStringId() -> b
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String getSortKey() -> c
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.Bookmark -> org.geometerplus.a.e.j:
    long myId -> c
    long myBookId -> d
    java.lang.String myText -> e
    java.util.Date myCreationDate -> f
    java.util.Date myModificationDate -> g
    java.util.Date myAccessDate -> h
    int myAccessCount -> l
    java.util.Date myLatestDate -> m
    java.lang.String ModelId -> a
    boolean IsVisible -> b
    boolean myIsChanged -> n
    long getId() -> a
    long getBookId() -> b
    java.lang.String getText() -> c
    java.util.Date getTime(int) -> a
    int getAccessCount() -> d
    void onOpen() -> e
    void save() -> f
    void delete() -> g
    java.lang.String createBookmarkText(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
org.geometerplus.fbreader.library.Bookmark$ByTimeComparator -> org.geometerplus.a.e.k:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.BooksDatabase -> org.geometerplus.a.e.l:
    org.geometerplus.fbreader.library.BooksDatabase ourInstance -> a
    org.geometerplus.fbreader.library.BooksDatabase Instance() -> e
    org.geometerplus.fbreader.library.Book createBook(long,long,java.lang.String,java.lang.String,java.lang.String) -> b
    org.geometerplus.fbreader.library.Book createBook(long,org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void addAuthor(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Author) -> a
    void addTag(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Tag) -> a
    void setSeriesInfo(org.geometerplus.fbreader.library.Book,java.lang.String,java.lang.String) -> a
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet,boolean) -> a
    void setExistingFlag(java.util.Collection,boolean) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List loadAuthors(long) -> c
    java.util.List loadTags(long) -> e
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> f
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> b
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    void deleteAllBookTags(long) -> d
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.FileInfo createFileInfo(long,java.lang.String,org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> a
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> h
    void removeFileInfo(long) -> g
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.List loadRecentBookIds() -> b
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadFavoritesIds() -> c
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    org.geometerplus.fbreader.library.Bookmark createBookmark(long,long,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,int,java.lang.String,int,int,int,boolean) -> a
    java.util.List loadBookmarks(long,boolean) -> a
    java.util.List loadAllVisibleBookmarks() -> d
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> k
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> l
    boolean deleteFromBookList(long) -> m
    java.util.Collection loadVisitedHyperlinks(long) -> n
    void addVisitedHyperlink(long,java.lang.String) -> a
org.geometerplus.fbreader.library.FavoritesTree -> org.geometerplus.a.e.m:
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
org.geometerplus.fbreader.library.FileFirstLevelTree -> org.geometerplus.a.e.n:
    void addChild(java.lang.String,java.lang.String) -> a
    java.lang.String getTreeTitle() -> i
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
org.geometerplus.fbreader.library.FileInfo -> org.geometerplus.a.e.o:
    java.lang.String Name -> a
    long Id -> b
    long FileSize -> c
org.geometerplus.fbreader.library.FileInfoSet -> org.geometerplus.a.e.p:
    java.util.HashMap myInfosByFile -> a
    java.util.HashMap myFilesByInfo -> b
    java.util.HashMap myInfosByPair -> c
    java.util.HashMap myInfosById -> d
    java.util.LinkedHashSet myInfosToSave -> e
    java.util.LinkedHashSet myInfosToRemove -> f
    void load(java.util.Collection) -> a
    void save() -> a
    boolean check(org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile,boolean) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.library.FileInfo get(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long getId(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(org.geometerplus.fbreader.library.FileInfo) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(long) -> a
    void removeChildren(org.geometerplus.fbreader.library.FileInfo) -> b
    void addChildren(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    java.util.LinkedHashSet access$0(org.geometerplus.fbreader.library.FileInfoSet) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.library.FileInfoSet) -> b
    java.util.LinkedHashSet access$2(org.geometerplus.fbreader.library.FileInfoSet) -> c
org.geometerplus.fbreader.library.FileInfoSet$1 -> org.geometerplus.a.e.q:
    org.geometerplus.fbreader.library.FileInfoSet this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.FileInfoSet$Pair -> org.geometerplus.a.e.r:
    java.lang.String myName -> a
    org.geometerplus.fbreader.library.FileInfo myParent -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.FileTree -> org.geometerplus.a.e.s:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    java.lang.String myName -> b
    java.lang.String mySummary -> c
    boolean myIsSelectable -> f
    java.lang.Object myBook -> g
    java.lang.Object NULL_BOOK -> h
    java.util.Comparator ourFileComparator -> i
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getStringId() -> b
    java.lang.String getSummary() -> e
    boolean isSelectable() -> b_
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile() -> k
    org.geometerplus.fbreader.library.Book getBook() -> d
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
    void waitForOpening() -> l
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.FileTree$1 -> org.geometerplus.a.e.t:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.FirstLevelTree -> org.geometerplus.a.e.u:
    java.lang.String myId -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSummary() -> e
    java.lang.String getStringId() -> b
    boolean isSelectable() -> b_
org.geometerplus.fbreader.library.Library -> org.geometerplus.a.e.v:
    org.geometerplus.fbreader.library.Library ourInstance -> a
    org.geometerplus.fbreader.library.BooksDatabase myDatabase -> b
    java.util.Map myBooks -> c
    org.geometerplus.fbreader.library.RootTree myRootTree -> d
    boolean myDoGroupTitlesByFirstLetter -> e
    int myStatusMask -> f
    java.util.List myNullList -> g
    boolean myBuildStarted -> h
    org.geometerplus.fbreader.library.Library Instance() -> b
    void setStatus(int) -> a
    org.geometerplus.fbreader.library.LibraryTree getRootTree() -> c
    org.geometerplus.fbreader.library.FirstLevelTree getFirstLevelTree(java.lang.String) -> b
    org.geometerplus.fbreader.library.LibraryTree getLibraryTree(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile getHelpFile() -> d
    void collectBooks(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,java.util.Map,java.util.Set,boolean) -> a
    java.util.List collectPhysicalFiles() -> i
    org.geometerplus.fbreader.library.LibraryTree getTagTree(org.geometerplus.fbreader.library.Tag) -> a
    void addBookToLibrary(org.geometerplus.fbreader.library.Book) -> i
    void removeFromTree(java.lang.String,org.geometerplus.fbreader.library.Book) -> a
    void refreshInTree(java.lang.String,org.geometerplus.fbreader.library.Book) -> b
    void refreshBookInfo(org.geometerplus.fbreader.library.Book) -> c
    void startBuild() -> e
    boolean isUpToDate() -> a
    org.geometerplus.fbreader.library.Book getRecentBook() -> f
    org.geometerplus.fbreader.library.Book getPreviousBook() -> g
    void startBookSearch(java.lang.String) -> a
    void addBookToRecentList(org.geometerplus.fbreader.library.Book) -> d
    boolean isBookInFavorites(org.geometerplus.fbreader.library.Book) -> e
    void addBookToFavorites(org.geometerplus.fbreader.library.Book) -> f
    void removeBookFromFavorites(org.geometerplus.fbreader.library.Book) -> g
    void removeBook(org.geometerplus.fbreader.library.Book,int) -> a
    java.util.List allBookmarks() -> h
    java.util.List invisibleBookmarks(org.geometerplus.fbreader.library.Book) -> h
    int access$0(org.geometerplus.fbreader.library.Library) -> a
    void access$1(org.geometerplus.fbreader.library.Library,int) -> a
    void access$2(org.geometerplus.fbreader.library.Library) -> b
    void access$3(org.geometerplus.fbreader.library.Library,java.lang.String) -> a
org.geometerplus.fbreader.library.Library$1 -> org.geometerplus.a.e.w:
    java.util.Set val$newBooks -> a
    void run() -> run
org.geometerplus.fbreader.library.Library$2 -> org.geometerplus.a.e.x:
    org.geometerplus.fbreader.library.Library this$0 -> a
    void run() -> run
org.geometerplus.fbreader.library.Library$3 -> org.geometerplus.a.e.y:
    org.geometerplus.fbreader.library.Library this$0 -> a
    java.lang.String val$pattern -> b
    void run() -> run
org.geometerplus.fbreader.library.LibraryTree -> org.geometerplus.a.e.z:
    org.geometerplus.fbreader.library.Book getBook() -> d
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    boolean isSelectable() -> b_
    org.geometerplus.fbreader.library.TagTree getTagSubTree(org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.TitleTree getTitleSubTree(java.lang.String) -> a
    org.geometerplus.fbreader.library.AuthorTree getAuthorSubTree(org.geometerplus.fbreader.library.Author) -> a
    org.geometerplus.fbreader.library.BookTree getBookSubTree(org.geometerplus.fbreader.library.Book,boolean) -> a
    org.geometerplus.fbreader.library.SeriesTree getSeriesSubTree(java.lang.String) -> b
    boolean removeBook(org.geometerplus.fbreader.library.Book,boolean) -> b
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.RootTree -> org.geometerplus.a.e.A:
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.library.SearchResultsTree -> org.geometerplus.a.e.B:
    java.lang.String myPattern -> a
    java.lang.String getPattern() -> k
    java.lang.String getSummary() -> e
org.geometerplus.fbreader.library.SeriesInfo -> org.geometerplus.a.e.C:
    java.lang.String Name -> a
    java.math.BigDecimal Index -> b
    java.math.BigDecimal createIndex(java.lang.String) -> a
org.geometerplus.fbreader.library.SeriesTree -> org.geometerplus.a.e.D:
    java.lang.String Series -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    org.geometerplus.fbreader.library.BookTree getBookInSeriesSubTree(org.geometerplus.fbreader.library.Book) -> b
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String getSortKey() -> c
org.geometerplus.fbreader.library.Tag -> org.geometerplus.a.e.E:
    java.util.HashMap ourTagSet -> c
    org.geometerplus.fbreader.library.Tag Parent -> a
    java.lang.String Name -> b
    org.geometerplus.fbreader.library.Tag getTag(org.geometerplus.fbreader.library.Tag,java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.TagTree -> org.geometerplus.a.e.F:
    org.geometerplus.fbreader.library.Tag Tag -> a
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    java.lang.String getSortKey() -> c
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.library.TitleTree -> org.geometerplus.a.e.G:
    java.lang.String Title -> a
    java.lang.String firstTitleLetter(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.fbreader.network.AbstractNetworkLink -> org.geometerplus.a.f.a:
    int myId -> d
    java.lang.String mySiteName -> e
    java.lang.String myTitle -> a
    java.lang.String mySummary -> b
    java.lang.String myLanguage -> f
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myInfos -> c
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getLanguage() -> e
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> f
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    java.lang.String toString() -> toString
    java.lang.String getTitleForComparison() -> h
    int getLanguageOrder(java.lang.String) -> a
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.AllCatalogsSearchItem -> org.geometerplus.a.f.b:
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
org.geometerplus.fbreader.network.Base64EncodedImage -> org.geometerplus.a.f.c:
    java.lang.String myDecodedFileName -> a
    java.lang.String makeImagesDir() -> a
    void setData(java.lang.String) -> a
    boolean isCacheValid(java.io.File) -> a
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
org.geometerplus.fbreader.network.BasketItem -> org.geometerplus.a.f.d:
    long myGeneration -> b
    org.geometerplus.zlibrary.core.options.ZLStringListOption myBooksInBasketOption -> c
    java.util.Map myBooks -> d
    void addItem(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    java.lang.CharSequence getSummary() -> a
    boolean canBeOpened() -> b
    java.lang.String getStringId() -> c
    long getGeneration() -> d
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    void clear() -> e
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> d
    java.util.List bookIds() -> f
    org.geometerplus.fbreader.network.NetworkBookItem getBook(java.lang.String) -> a
    boolean isFullyLoaded() -> g
    org.geometerplus.zlibrary.core.money.Money cost() -> n
org.geometerplus.fbreader.network.ICustomNetworkLink -> org.geometerplus.a.f.e:
    void setTitle(java.lang.String) -> a
    void setSummary(java.lang.String) -> b
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete(long) -> a
    void reloadInfo(boolean,boolean) -> a
    boolean hasChanges() -> h
org.geometerplus.fbreader.network.INetworkLink -> org.geometerplus.a.f.f:
    int getId() -> a
    void setId(int) -> a
    java.lang.String getSiteName() -> b
    java.lang.String getTitle() -> c
    java.lang.String getSummary() -> d
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> f
    org.geometerplus.fbreader.network.INetworkLink$Type getType() -> i
    java.lang.String getLanguage() -> e
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> j
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> k
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
org.geometerplus.fbreader.network.INetworkLink$Type -> org.geometerplus.a.f.g:
    org.geometerplus.fbreader.network.INetworkLink$Type Predefined -> a
    org.geometerplus.fbreader.network.INetworkLink$Type Custom -> b
    org.geometerplus.fbreader.network.INetworkLink$Type Local -> c
    int Index -> d
    org.geometerplus.fbreader.network.INetworkLink$Type[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.INetworkLink$Type byIndex(int) -> a
    org.geometerplus.fbreader.network.INetworkLink$Type[] values() -> a
org.geometerplus.fbreader.network.IPredefinedNetworkLink -> org.geometerplus.a.f.h:
    java.lang.String getPredefinedId() -> h
org.geometerplus.fbreader.network.NetworkBookItem -> org.geometerplus.a.f.i:
    java.lang.String Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Tags -> c
    java.lang.String SeriesTitle -> d
    float IndexInSeries -> e
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$urlInfo$UrlInfo$Type -> h
    boolean isFullyLoaded() -> b
    void loadFullInformation() -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.NetworkBookItem$Status getStatus() -> d
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo getReferenceInternal(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo reference(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo buyInfo() -> e
    java.lang.String localCopyFileName() -> f
    java.lang.String getStringId() -> g
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$urlInfo$UrlInfo$Type() -> h
org.geometerplus.fbreader.network.NetworkBookItem$AuthorData -> org.geometerplus.a.f.j:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.NetworkBookItem$Status -> org.geometerplus.a.f.k:
    org.geometerplus.fbreader.network.NetworkBookItem$Status NotAvailable -> a
    org.geometerplus.fbreader.network.NetworkBookItem$Status Downloaded -> b
    org.geometerplus.fbreader.network.NetworkBookItem$Status ReadyForDownload -> c
    org.geometerplus.fbreader.network.NetworkBookItem$Status CanBePurchased -> d
org.geometerplus.fbreader.network.NetworkBookItemComparator -> org.geometerplus.a.f.l:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkCatalogItem -> org.geometerplus.a.f.m:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility myAccessibility -> b
    int myFlags -> c
    boolean UpdatingInProgress -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility -> d
    java.util.Map extraData() -> h
    boolean canBeOpened() -> b
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    boolean supportsResumeLoading() -> i
    void resumeLoading(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
    int getFlags() -> j
    void setFlags(int) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> k
    java.lang.String getStringId() -> c
    void doLoadChildren(org.geometerplus.fbreader.network.NetworkOperationData,org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility() -> d
org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility -> org.geometerplus.a.f.n:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility NEVER -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility ALWAYS -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility SIGNED_IN -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility HAS_BOOKS -> d
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] values() -> a
org.geometerplus.fbreader.network.NetworkDatabase -> org.geometerplus.a.f.o:
    org.geometerplus.fbreader.network.NetworkDatabase ourInstance -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$INetworkLink$Type -> b
    org.geometerplus.fbreader.network.NetworkDatabase Instance() -> b
    org.geometerplus.fbreader.network.INetworkLink createLink(int,org.geometerplus.fbreader.network.INetworkLink$Type,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List listLinks() -> a
    void saveLink(org.geometerplus.fbreader.network.INetworkLink) -> a
    void deleteLink(org.geometerplus.fbreader.network.INetworkLink) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$INetworkLink$Type() -> c
org.geometerplus.fbreader.network.NetworkImage -> org.geometerplus.a.f.p:
    java.lang.String Url -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myFileImage -> b
    java.lang.String getFilePath() -> j
    int sourceType() -> a
    java.lang.String getId() -> b
    java.lang.String getURI() -> a_
    void synchronize() -> d
    void synchronizeFast() -> e
    void synchronizeInternal(boolean) -> a
    java.io.InputStream inputStream() -> f
org.geometerplus.fbreader.network.NetworkItem -> org.geometerplus.a.f.q:
    org.geometerplus.fbreader.network.INetworkLink Link -> f
    java.lang.CharSequence Title -> g
    java.lang.CharSequence mySummary -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myURLs -> b
    void setSummary(java.lang.CharSequence) -> a
    java.lang.CharSequence getSummary() -> a
    void addUrls(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List getAllInfos() -> l
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    java.lang.String getImageUrl() -> m
org.geometerplus.fbreader.network.NetworkLibrary -> org.geometerplus.a.f.r:
    org.geometerplus.fbreader.network.NetworkLibrary ourInstance -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption NetworkSearchPatternOption -> a
    java.util.List myLinks -> c
    java.util.Set myListeners -> d
    java.util.Map myLoaders -> e
    java.util.Map myImageMap -> f
    org.geometerplus.zlibrary.core.options.ZLStringOption myActiveLanguageCodesOption -> g
    org.geometerplus.fbreader.network.tree.RootTree myRootTree -> h
    org.geometerplus.fbreader.network.tree.RootTree myFakeRootTree -> i
    boolean myChildrenAreInvalid -> j
    boolean myUpdateVisibility -> k
    boolean myIsInitialized -> l
    org.geometerplus.fbreader.network.SearchItem mySearchItem -> m
    boolean myUpdateInProgress -> n
    java.lang.Object myUpdateLock -> o
    org.geometerplus.fbreader.network.NetworkLibrary Instance() -> a
    java.util.List languageCodes() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption activeLanguageCodesOption() -> k
    java.util.Collection activeLanguageCodes() -> c
    void setActiveLanguageCodes(java.util.Collection) -> a
    java.lang.String commaSeparatedString(java.util.Collection) -> b
    java.util.List activeLinks() -> d
    org.geometerplus.fbreader.network.INetworkLink getLinkByUrl(java.lang.String) -> a
    org.geometerplus.fbreader.network.INetworkLink getLinkBySiteName(java.lang.String) -> b
    boolean isInitialized() -> e
    void initialize() -> f
    void removeAllLoadedLinks() -> l
    void runBackgroundUpdate(boolean) -> a
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    void invalidateVisibility() -> g
    void updateVisibility() -> m
    void synchronize() -> h
    org.geometerplus.fbreader.network.NetworkTree getRootTree() -> i
    org.geometerplus.fbreader.network.tree.NetworkBookTree getFakeBookTree(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    org.geometerplus.fbreader.network.tree.BasketCatalogTree getFakeBasketTree(org.geometerplus.fbreader.network.BasketItem) -> a
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getFakeCatalogTree(org.geometerplus.fbreader.network.NetworkCatalogItem) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeByKey(org.geometerplus.fbreader.tree.FBTree$Key) -> a
    void addCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void removeCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
    void addChangeListener(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener) -> a
    void removeChangeListener(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener) -> b
    void fireModelChangedEvent(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
    void storeLoader(org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader getStoredLoader(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean isUpdateInProgress() -> j
    void startLoading(org.geometerplus.fbreader.network.NetworkCatalogItem) -> b
    void stopLoading(org.geometerplus.fbreader.network.NetworkCatalogItem) -> c
    boolean isLoadingInProgress(org.geometerplus.fbreader.network.NetworkTree) -> b
    void removeStoredLoader(org.geometerplus.fbreader.network.NetworkTree) -> c
    org.geometerplus.zlibrary.core.image.ZLImage getImageByUrl(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    void access$0(org.geometerplus.fbreader.network.NetworkLibrary,boolean) -> a
    void access$1(org.geometerplus.fbreader.network.NetworkLibrary,boolean) -> b
org.geometerplus.fbreader.network.NetworkLibrary$1 -> org.geometerplus.a.f.s:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    boolean val$clearCache -> b
    void run() -> run
org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener -> org.geometerplus.a.f.t:
    void onLibraryChanged(org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code,java.lang.Object[]) -> a
org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code -> org.geometerplus.a.f.u:
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code InitializationFinished -> a
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code InitializationFailed -> b
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code SomeCode -> c
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code SignedIn -> d
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code Found -> e
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code NotFound -> f
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code EmptyCatalog -> g
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code NetworkError -> h
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code[] ENUM$VALUES -> i
    org.geometerplus.fbreader.network.NetworkLibrary$ChangeListener$Code[] values() -> a
org.geometerplus.fbreader.network.NetworkOperationData -> org.geometerplus.a.f.v:
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader Loader -> b
    java.lang.String ResumeURI -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume() -> a
org.geometerplus.fbreader.network.NetworkTree -> org.geometerplus.a.f.w:
    org.geometerplus.fbreader.network.INetworkLink getLink() -> d
    org.geometerplus.zlibrary.core.image.ZLImage createCover(org.geometerplus.fbreader.network.NetworkItem) -> a
    void removeTrees(java.util.Set) -> a
org.geometerplus.fbreader.network.NetworkURLCatalogItem -> org.geometerplus.a.f.x:
    java.lang.String getCatalogUrl() -> d
    boolean canBeOpened() -> b
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.SearchItem -> org.geometerplus.a.f.y:
    java.lang.String myPattern -> b
    void setPattern(java.lang.String) -> a
    java.lang.String getPattern() -> d
    boolean canBeOpened() -> b
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.SingleCatalogSearchItem -> org.geometerplus.a.f.z:
    void runSearch(org.geometerplus.fbreader.network.tree.NetworkItemsLoader,java.lang.String) -> a
org.geometerplus.fbreader.network.TopUpItem -> org.geometerplus.a.f.A:
org.geometerplus.fbreader.network.atom.ATOMAuthor -> org.geometerplus.a.f.a.a:
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCategory -> org.geometerplus.a.f.a.b:
    java.lang.String getTerm() -> a
    java.lang.String getLabel() -> b
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCommonAttributes -> org.geometerplus.a.f.a.c:
    org.geometerplus.zlibrary.core.xml.ZLStringMap myAttributes -> a
    void readAttribute(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    void addAttribute(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMDateConstruct -> org.geometerplus.a.f.a.d:
    int Year -> a
    int Month -> b
    int Day -> c
    int Hour -> d
    int Minutes -> e
    int Seconds -> f
    float SecondFraction -> g
    int TZHour -> h
    int TZMinutes -> i
    int[] DAYS_IN_MONTHS -> j
    boolean parse(java.lang.String,org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    void appendChars(java.lang.StringBuilder,char,int) -> a
    java.lang.String toString() -> toString
    int daysInMonth(int,int) -> a
    int compareTo(org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.atom.ATOMEntry -> org.geometerplus.a.f.a.e:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    java.util.LinkedList Links -> d
    org.geometerplus.fbreader.network.atom.ATOMPublished Published -> e
    java.lang.CharSequence Summary -> f
    java.lang.CharSequence Content -> g
    java.lang.CharSequence Title -> h
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> i
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMFeedHandler -> org.geometerplus.a.f.a.f:
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    void processFeedEnd() -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
org.geometerplus.fbreader.network.atom.ATOMFeedMetadata -> org.geometerplus.a.f.a.g:
    java.util.LinkedList Authors -> a
    java.util.LinkedList Categories -> b
    org.geometerplus.fbreader.network.atom.ATOMIcon Icon -> c
    java.util.LinkedList Links -> d
    java.lang.CharSequence Subtitle -> e
    java.lang.CharSequence Title -> f
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMIcon -> org.geometerplus.a.f.a.h:
    java.lang.String Uri -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMId -> org.geometerplus.a.f.a.i:
    java.lang.String Uri -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMLink -> org.geometerplus.a.f.a.j:
    java.lang.String getHref() -> a
    java.lang.String getRel() -> b
    java.lang.String getType() -> c
    java.lang.String getTitle() -> d
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPersonConstruct -> org.geometerplus.a.f.a.k:
    java.lang.String Name -> a
    java.lang.String Uri -> b
    java.lang.String Email -> c
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPublished -> org.geometerplus.a.f.a.l:
org.geometerplus.fbreader.network.atom.ATOMUpdated -> org.geometerplus.a.f.a.m:
org.geometerplus.fbreader.network.atom.ATOMXMLReader -> org.geometerplus.a.f.a.n:
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler myFeedHandler -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata myFeed -> d
    org.geometerplus.fbreader.network.atom.ATOMEntry myEntry -> e
    org.geometerplus.fbreader.network.atom.ATOMAuthor myAuthor -> f
    org.geometerplus.fbreader.network.atom.ATOMId myId -> g
    org.geometerplus.fbreader.network.atom.ATOMLink myLink -> h
    org.geometerplus.fbreader.network.atom.ATOMCategory myCategory -> i
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdated -> j
    org.geometerplus.fbreader.network.atom.ATOMPublished myPublished -> k
    org.geometerplus.fbreader.network.atom.ATOMIcon myIcon -> l
    java.util.Map myNamespaceMap -> m
    int myState -> a
    java.lang.StringBuilder myBuffer -> n
    org.geometerplus.fbreader.network.atom.FormattedBuffer myFormattedBuffer -> b
    boolean myFeedMetadataProcessed -> o
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler getATOMFeedHandler() -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata getATOMFeed() -> e
    org.geometerplus.fbreader.network.atom.ATOMEntry getATOMEntry() -> f
    org.geometerplus.fbreader.network.atom.ATOMLink getATOMLink() -> g
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getNamespace(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String extractBufferContent() -> h
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void setFormattingType(java.lang.String) -> c
org.geometerplus.fbreader.network.atom.AbstractATOMFeedHandler -> org.geometerplus.a.f.a.o:
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer -> org.geometerplus.a.f.a.p:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type myType -> a
    java.lang.StringBuilder myBuffer -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type -> c
    void appendText(java.lang.CharSequence) -> a
    void appendStartTag(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void appendEndTag(java.lang.String) -> a
    void reset(org.geometerplus.fbreader.network.atom.FormattedBuffer$Type) -> a
    void reset() -> a
    java.lang.CharSequence getText() -> b
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type() -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer$Type -> org.geometerplus.a.f.a.q:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Text -> a
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Html -> b
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type XHtml -> c
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] values() -> a
org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager -> org.geometerplus.a.f.b.a:
    java.util.HashMap ourManagers -> c
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption UserNameOption -> b
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager createManager(org.geometerplus.fbreader.network.INetworkLink,java.lang.Class) -> a
    java.lang.String getUserName() -> a
    java.lang.String getVisibleUserName() -> b
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String,java.lang.String) -> a
    void logOut() -> c
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void refreshAccountInformation() -> d
    boolean mayBeAuthorised(boolean) -> b
    boolean needsInitialization() -> e
    void initialize() -> f
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List purchasedBooks() -> g
    org.geometerplus.zlibrary.core.money.Money currentAccount() -> h
    java.lang.String topupLink(org.geometerplus.zlibrary.core.money.Money) -> a
    java.util.Map getTopupData() -> i
org.geometerplus.fbreader.network.authentication.litres.ByAuthorCatalogItem -> org.geometerplus.a.f.b.a.a:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.ByDateCatalogItem -> org.geometerplus.a.f.b.a.b:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem -> org.geometerplus.a.f.b.a.c:
    java.util.Comparator getComparator() -> d
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem$1 -> org.geometerplus.a.f.b.a.d:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem -> org.geometerplus.a.f.b.a.e:
    java.util.Comparator getComparator() -> d
    java.lang.String getStringId() -> c
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem$1 -> org.geometerplus.a.f.b.a.f:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager -> org.geometerplus.a.f.b.a.g:
    boolean myFullyInitialized -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption mySidOption -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption myUserIdOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myCanRebillOption -> f
    java.lang.String myInitializedDataSid -> g
    org.geometerplus.zlibrary.core.money.Money myAccount -> h
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager$BookCollection myPurchasedBooks -> i
    boolean initUser(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void logOut() -> c
    void logOut(boolean) -> c
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String,java.lang.String) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.lang.String topupLink(org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money currentAccount() -> h
    void reloadPurchasedBooks() -> j
    java.util.List purchasedBooks() -> g
    boolean needsInitialization() -> e
    void initialize() -> f
    void refreshAccountInformation() -> d
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadPurchasedBooksRequest(java.lang.String) -> a
    void loadPurchasedBooksOnSuccess(org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest) -> a
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadAccountRequest(java.lang.String) -> b
    java.util.Map getTopupData() -> i
    java.lang.String parseUrl(java.lang.String,java.util.Map) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager$BookCollection -> org.geometerplus.a.f.b.a.h:
    java.util.Map myMap -> a
    java.util.List myList -> b
    void clear() -> a
    boolean isEmpty() -> b
    void addToStart(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void addToEnd(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List list() -> c
    java.lang.String url(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader -> org.geometerplus.a.f.b.a.i:
    java.lang.String HostName -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException myException -> b
    void setException(org.geometerplus.zlibrary.core.network.ZLNetworkException) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException getException() -> c
org.geometerplus.fbreader.network.authentication.litres.LitResBookshelfItem -> org.geometerplus.a.f.b.a.j:
    boolean myForceReload -> b
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResLoginXMLReader -> org.geometerplus.a.f.b.a.k:
    java.lang.String UserId -> b
    java.lang.String Sid -> c
    boolean CanRebill -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest -> org.geometerplus.a.f.b.a.l:
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader Reader -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResPurchaseXMLReader -> org.geometerplus.a.f.b.a.m:
    java.lang.String Account -> b
    java.lang.String BookId -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResRecommendationsItem -> org.geometerplus.a.f.b.a.n:
    java.lang.String getCatalogUrl() -> d
org.geometerplus.fbreader.network.authentication.litres.LitResXMLReader -> org.geometerplus.a.f.b.a.o:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink Link -> c
    java.util.List Books -> b
    int myIndex -> d
    java.lang.String myBookId -> e
    java.lang.String myTitle -> f
    java.lang.String mySeriesTitle -> g
    int myIndexInSeries -> h
    java.lang.CharSequence mySummary -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myUrls -> j
    java.lang.String myAuthorFirstName -> k
    java.lang.String myAuthorMiddleName -> l
    java.lang.String myAuthorLastName -> m
    java.util.LinkedList myAuthors -> n
    java.util.LinkedList myTags -> o
    int myState -> p
    java.lang.StringBuilder myBuffer -> q
    org.geometerplus.fbreader.network.atom.FormattedBuffer myAnnotationBuffer -> r
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.network.authentication.litres.SortedCatalogItem -> org.geometerplus.a.f.b.a.p:
    java.util.List myChildren -> b
    boolean canBeOpened() -> b
    boolean isEmpty() -> e
    java.util.Comparator getComparator() -> d
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.AbstractOPDSFeedHandler -> org.geometerplus.a.f.c.a:
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.opds.DCDate -> org.geometerplus.a.f.c.b:
org.geometerplus.fbreader.network.opds.OPDSBasketItem -> org.geometerplus.a.f.c.c:
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem -> org.geometerplus.a.f.c.d:
    boolean myInformationIsFull -> h
    org.geometerplus.fbreader.network.opds.OPDSBookItem create(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    java.lang.CharSequence getAnnotation(org.geometerplus.fbreader.network.opds.OPDSEntry) -> b
    java.util.List getAuthors(org.geometerplus.fbreader.network.opds.OPDSEntry) -> c
    java.util.List getTags(org.geometerplus.fbreader.network.opds.OPDSEntry) -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection getUrls(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> b
    void collectReferences(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection,org.geometerplus.fbreader.network.opds.OPDSLink,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,org.geometerplus.zlibrary.core.money.Money,boolean) -> a
    int formatByMimeType(org.geometerplus.zlibrary.core.util.MimeType) -> a
    boolean isFullyLoaded() -> b
    void loadFullInformation() -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection access$1(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> a
    void access$2(org.geometerplus.fbreader.network.opds.OPDSBookItem,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.lang.CharSequence access$3(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    void access$4(org.geometerplus.fbreader.network.opds.OPDSBookItem,java.lang.CharSequence) -> a
    void access$5(org.geometerplus.fbreader.network.opds.OPDSBookItem,boolean) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$1 -> org.geometerplus.a.f.c.e:
    org.geometerplus.fbreader.network.opds.OPDSBookItem$CreateBookHandler val$handler -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$2 -> org.geometerplus.a.f.c.f:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    java.lang.String val$url -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$CreateBookHandler -> org.geometerplus.a.f.c.g:
    org.geometerplus.fbreader.network.INetworkLink myLink -> b
    org.geometerplus.fbreader.network.opds.OPDSBookItem myBook -> c
    org.geometerplus.fbreader.network.opds.OPDSBookItem getBook() -> c
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$LoadInfoHandler -> org.geometerplus.a.f.c.h:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> b
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$SingleEntryFeedHandler -> org.geometerplus.a.f.c.i:
    java.lang.String myUrl -> a
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogInfoHandler -> org.geometerplus.a.f.c.j:
    boolean FeedStarted -> a
    java.lang.String Icon -> b
    java.lang.CharSequence Title -> c
    java.lang.CharSequence Summary -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription DirectOpenSearchDescription -> e
    java.util.List myOpensearchDescriptionURLs -> f
    java.lang.String myBaseURL -> g
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink myLink -> h
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogItem -> org.geometerplus.a.f.c.k:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myLoadingState -> b
    java.util.Map myExtraData -> c
    void doLoadChildren(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    java.util.Map extraData() -> h
    void loadChildren(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
    boolean supportsResumeLoading() -> i
    void resumeLoading(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State -> org.geometerplus.a.f.c.l:
    java.lang.String LastLoadedId -> d
    java.util.HashSet LoadedIds -> e
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink -> org.geometerplus.a.f.c.m:
    org.geometerplus.fbreader.network.INetworkLink$Type myType -> d
    boolean myHasChanges -> e
    org.geometerplus.fbreader.network.INetworkLink$Type getType() -> i
    boolean hasChanges() -> h
    void setSummary(java.lang.String) -> b
    void setTitle(java.lang.String) -> a
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete(long) -> a
    void reloadInfo(boolean,boolean) -> a
    void access$0(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> a
    void access$1(org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink,java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$1 -> org.geometerplus.a.f.c.n:
    org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink this$0 -> a
    java.util.LinkedList val$opensearchDescriptionURLs -> e
    java.util.List val$descriptions -> f
    boolean val$urlsOnly -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSCustomNetworkLink$2 -> org.geometerplus.a.f.c.o:
    java.util.List val$descriptions -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSEntry -> org.geometerplus.a.f.c.p:
    java.lang.String DCLanguage -> j
    java.lang.String DCPublisher -> k
    org.geometerplus.fbreader.network.opds.DCDate DCIssued -> l
    java.lang.String SeriesTitle -> m
    float SeriesIndex -> n
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.opds.OPDSFeedHandler -> org.geometerplus.a.f.c.q:
    org.geometerplus.fbreader.network.NetworkCatalogItem myCatalog -> a
    java.lang.String myBaseURL -> b
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myData -> c
    int myIndex -> d
    java.lang.String myNextURL -> e
    java.lang.String mySkipUntilId -> f
    boolean myFoundNewIds -> g
    int myItemsToLoad -> h
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean tryInterrupt() -> c
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSFeedMetadata -> org.geometerplus.a.f.c.r:
    int OpensearchTotalResults -> g
    int OpensearchItemsPerPage -> h
    int OpensearchStartIndex -> i
    java.lang.String ViewType -> j
org.geometerplus.fbreader.network.opds.OPDSLink -> org.geometerplus.a.f.c.s:
    java.util.LinkedList Prices -> a
    java.util.LinkedList Formats -> b
    org.geometerplus.zlibrary.core.money.Money getPrice(java.lang.String) -> b
    org.geometerplus.zlibrary.core.money.Money selectBestPrice() -> e
org.geometerplus.fbreader.network.opds.OPDSLinkReader -> org.geometerplus.a.f.c.t:
    java.lang.String FILE_NAME -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$opds$OPDSLinkReader$CacheMode -> b
    java.util.List loadOPDSLinks(org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode) -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$opds$OPDSLinkReader$CacheMode() -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$1 -> org.geometerplus.a.f.c.u:
    org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader val$xmlReader -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode -> org.geometerplus.a.f.c.v:
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode LOAD -> a
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode UPDATE -> b
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode CLEAR -> c
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.opds.OPDSLinkReader$CacheMode[] values() -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader -> org.geometerplus.a.f.c.w:
    java.util.List links() -> h
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader$FeedHandler -> org.geometerplus.a.f.c.x:
    java.util.List myLinks -> a
    java.lang.String myAuthenticationType -> b
    java.util.LinkedList myUrlRewritingRules -> c
    java.util.HashMap myRelationAliases -> d
    java.util.LinkedHashMap myExtraData -> e
    java.util.List links() -> c
    void setAuthenticationType(java.lang.String) -> a
    void addUrlRewritingRule(org.geometerplus.fbreader.network.opds.URLRewritingRule) -> a
    void addRelationAlias(org.geometerplus.fbreader.network.opds.RelationAlias,java.lang.String) -> a
    void putExtraData(java.lang.String,java.lang.String) -> a
    void clear() -> d
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink -> org.geometerplus.a.f.c.y:
    java.util.TreeMap myRelationAliases -> d
    java.util.LinkedList myUrlRewritingRules -> e
    java.util.Map myExtraData -> f
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager myAuthenticationManager -> g
    org.geometerplus.fbreader.network.BasketItem myBasketItem -> h
    void setRelationAliases(java.util.Map) -> a
    void setUrlRewritingRules(java.util.List) -> a
    void setExtraData(java.util.Map) -> b
    void setAuthenticationManager(org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest createNetworkData(java.lang.String,org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State) -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> j
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> k
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    java.lang.String relation(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    org.geometerplus.fbreader.network.BasketItem getBasketItem() -> g
    java.lang.String toString() -> toString
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.tree.NetworkItemsLoader) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink$1 -> org.geometerplus.a.f.c.z:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State val$result -> a
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> e
    org.geometerplus.fbreader.network.NetworkCatalogItem val$catalogItem -> f
    void handleStream(java.io.InputStream,int) -> a
    void doAfter$1385ff() -> a
org.geometerplus.fbreader.network.opds.OPDSPredefinedNetworkLink -> org.geometerplus.a.f.c.A:
    java.lang.String myPredefinedId -> d
    org.geometerplus.fbreader.network.INetworkLink$Type getType() -> i
    java.lang.String getPredefinedId() -> h
org.geometerplus.fbreader.network.opds.OPDSXMLReader -> org.geometerplus.a.f.c.B:
    org.geometerplus.fbreader.network.opds.DCDate myDCIssued -> c
    java.lang.String myPriceCurrency -> d
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OpenSearchDescription -> org.geometerplus.a.f.c.C:
    java.lang.String Template -> a
    int IndexOffset -> b
    int PageOffset -> c
    org.geometerplus.fbreader.network.opds.OpenSearchDescription createDefault(java.lang.String) -> a
    boolean isValid() -> a
    java.lang.String makeQuery(java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OpenSearchXMLReader -> org.geometerplus.a.f.c.D:
    java.util.List myDescriptions -> a
    java.lang.String myBaseURL -> b
    int myState -> c
    boolean processNamespaces() -> b
    int parseInt(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.network.opds.RelationAlias -> org.geometerplus.a.f.c.E:
    java.lang.String Alias -> a
    java.lang.String Type -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.opds.URLRewritingRule -> org.geometerplus.a.f.c.F:
    int myType -> a
    int myApply -> b
    java.util.HashMap myParameters -> c
    int whereToApply() -> a
    java.lang.String apply(java.lang.String) -> a
org.geometerplus.fbreader.network.tree.AddCustomCatalogItemTree -> org.geometerplus.a.f.d.a:
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.BasketCatalogTree -> org.geometerplus.a.f.d.b:
    long myGeneration -> c
    boolean canUseParentCover() -> j
    java.util.List subTrees() -> c_
    void addItem(org.geometerplus.fbreader.network.NetworkItem) -> b
org.geometerplus.fbreader.network.tree.CatalogExpander -> org.geometerplus.a.f.d.c:
    boolean myCheckAuthentication -> a
    boolean myResumeNotLoad -> b
    void doBefore() -> a
    void doLoading() -> b
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
org.geometerplus.fbreader.network.tree.NetworkAuthorTree -> org.geometerplus.a.f.d.d:
    org.geometerplus.fbreader.network.NetworkBookItem$AuthorData Author -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> c
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkBookTree -> org.geometerplus.a.f.d.e:
    org.geometerplus.fbreader.network.NetworkBookItem Book -> a
    boolean myShowAuthors -> b
    boolean canUseParentCover() -> j
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkCatalogRootTree -> org.geometerplus.a.f.d.f:
    java.lang.String getTreeTitle() -> i
    void addSpecialTrees() -> m
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.network.tree.NetworkCatalogTree -> org.geometerplus.a.f.d.g:
    org.geometerplus.fbreader.network.INetworkLink myLink -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem Item -> a
    java.util.ArrayList myChildrenItems -> b
    int myLastTotalChildren -> f
    long myLoadedTime -> g
    org.geometerplus.fbreader.network.SearchItem mySearchItem -> h
    java.util.Set myUnconfirmedTrees -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> j
    org.geometerplus.fbreader.network.INetworkLink getLink() -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> n
    boolean canBeOpened() -> o
    void addSpecialTrees() -> m
    void addItem(org.geometerplus.fbreader.network.NetworkItem) -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    java.lang.String getTreeTitle() -> i
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean isContentValid() -> p
    void updateLoadedTime() -> q
    void updateVisibility() -> r
    void removeTrees(java.util.Set) -> a
    java.lang.String getStringId() -> b
    void startItemsLoader(boolean,boolean) -> a
    void clearCatalog() -> s
    void confirmAllItems() -> t
    void removeUnconfirmedItems() -> u
    void loadMoreChildren(int) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> B
org.geometerplus.fbreader.network.tree.NetworkItemsLoader -> org.geometerplus.a.f.d.h:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree myTree -> a
    java.lang.Runnable myPostRunnable -> b
    boolean myFinishedFlag -> c
    java.lang.Object myInterruptLock -> d
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState myInterruptionState -> e
    void start() -> c
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getTree() -> d
    void run() -> run
    boolean canResumeLoading() -> e
    boolean isLoadingInterrupted() -> h
    void interrupt() -> f
    boolean confirmInterruption() -> g
    void onNewItem(org.geometerplus.fbreader.network.NetworkItem) -> a
    void setPostRunnable(java.lang.Runnable) -> a
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
    void doBefore() -> a
    void doLoading() -> b
org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState -> org.geometerplus.a.f.d.i:
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState NONE -> a
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState REQUESTED -> b
    org.geometerplus.fbreader.network.tree.NetworkItemsLoader$InterruptionState CONFIRMED -> c
org.geometerplus.fbreader.network.tree.NetworkSeriesTree -> org.geometerplus.a.f.d.j:
    java.lang.String SeriesTitle -> a
    boolean myShowAuthors -> b
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    void removeTrees(java.util.Set) -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.NetworkTreeFactory -> org.geometerplus.a.f.d.k:
    org.geometerplus.fbreader.network.NetworkTree createNetworkTree(org.geometerplus.fbreader.network.tree.NetworkCatalogTree,org.geometerplus.fbreader.network.NetworkItem,int) -> a
org.geometerplus.fbreader.network.tree.RootTree -> org.geometerplus.a.f.d.l:
    boolean IsFake -> a
    java.lang.String myId -> b
    java.lang.String getName() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.tree.SearchCatalogTree -> org.geometerplus.a.f.d.m:
    void setPattern(java.lang.String) -> a
    boolean canUseParentCover() -> j
    boolean isContentValid() -> p
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSummary() -> e
    void startItemsLoader(java.lang.String) -> b
org.geometerplus.fbreader.network.tree.Searcher -> org.geometerplus.a.f.d.n:
    java.lang.String myPattern -> a
    boolean myItemFound -> b
    void doBefore() -> a
    void interrupt() -> f
    void doLoading() -> b
    void onNewItem(org.geometerplus.fbreader.network.NetworkItem) -> a
    void onFinish(org.geometerplus.zlibrary.core.network.ZLNetworkException,boolean) -> a
org.geometerplus.fbreader.network.tree.TopUpTree -> org.geometerplus.a.f.d.o:
    org.geometerplus.fbreader.network.TopUpItem Item -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo -> org.geometerplus.a.f.e.a:
    org.geometerplus.zlibrary.core.money.Money Price -> a
org.geometerplus.fbreader.network.urlInfo.BookUrlInfo -> org.geometerplus.a.f.e.b:
    int BookFormat -> b
    java.lang.String makeBookFileName(java.lang.String,int,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String cleanUrl() -> a
    java.lang.String localCopyFileName(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.urlInfo.DecoratedBookUrlInfo -> org.geometerplus.a.f.e.c:
    java.lang.String myCleanUrl -> a
    java.lang.String cleanUrl() -> a
org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo -> org.geometerplus.a.f.e.d:
    java.lang.String Title -> a
    org.geometerplus.zlibrary.core.util.MimeType Mime -> b
org.geometerplus.fbreader.network.urlInfo.UrlInfo -> org.geometerplus.a.f.e.e:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type InfoType -> c
    java.lang.String Url -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type -> org.geometerplus.a.f.e.f:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Catalog -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type HtmlPage -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SingleEntry -> c
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Related -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Image -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Thumbnail -> f
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Search -> g
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type ListBooks -> h
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignIn -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignOut -> j
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignUp -> k
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TopUp -> l
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type RecoverPassword -> m
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Book -> n
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookConditional -> o
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookDemo -> p
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookFullOrDemo -> q
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuy -> r
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuyInBrowser -> s
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TOC -> t
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Comments -> u
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] ENUM$VALUES -> v
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] values() -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type valueOf(java.lang.String) -> a
org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection -> org.geometerplus.a.f.e.g:
    java.util.LinkedList myInfos -> a
    void upgrade(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    void addInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo getInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.util.List getAllInfos() -> a
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    void clear() -> b
    void removeAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    boolean isEmpty() -> c
org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate -> org.geometerplus.a.f.e.h:
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate NULL -> a
    java.util.Date Updated -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.tips.Tip -> org.geometerplus.a.g.a:
    java.lang.CharSequence Title -> a
    java.lang.CharSequence Content -> b
org.geometerplus.fbreader.tips.TipsFeedHandler -> org.geometerplus.a.g.b:
    java.util.List Tips -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.tips.TipsManager -> org.geometerplus.a.g.c:
    org.geometerplus.fbreader.tips.TipsManager ourInstance -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption TipsAreInitializedOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowTipsOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myLastShownOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myIndexOption -> e
    boolean myDownloadInProgress -> f
    java.util.List myTips -> g
    org.geometerplus.fbreader.tips.TipsManager Instance() -> a
    java.lang.String getLocalFilePath() -> f
    java.util.List getTips() -> g
    boolean hasNextTip() -> b
    org.geometerplus.fbreader.tips.Tip getNextTip() -> c
    int currentTime() -> h
    org.geometerplus.fbreader.tips.TipsManager$Action requiredAction() -> d
    void startDownloading() -> e
    void access$0(org.geometerplus.fbreader.tips.TipsManager,boolean) -> a
    java.lang.String access$1(org.geometerplus.fbreader.tips.TipsManager) -> a
    java.lang.String access$2(org.geometerplus.fbreader.tips.TipsManager) -> b
org.geometerplus.fbreader.tips.TipsManager$1 -> org.geometerplus.a.g.d:
    org.geometerplus.fbreader.tips.TipsManager this$0 -> a
    void run() -> run
org.geometerplus.fbreader.tips.TipsManager$Action -> org.geometerplus.a.g.e:
    org.geometerplus.fbreader.tips.TipsManager$Action Initialize -> a
    org.geometerplus.fbreader.tips.TipsManager$Action Show -> b
    org.geometerplus.fbreader.tips.TipsManager$Action Download -> c
    org.geometerplus.fbreader.tips.TipsManager$Action None -> d
    org.geometerplus.fbreader.tips.TipsManager$Action[] ENUM$VALUES -> e
    org.geometerplus.fbreader.tips.TipsManager$Action[] values() -> a
org.geometerplus.fbreader.tree.FBTree -> org.geometerplus.a.h.a:
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> a
    boolean myCoverRequested -> b
    org.geometerplus.fbreader.tree.FBTree$Key myKey -> c
    org.geometerplus.fbreader.tree.FBTree$Key getUniqueKey() -> v
    java.lang.String getStringId() -> b
    org.geometerplus.fbreader.tree.FBTree getSubTree(java.lang.String) -> c
    int indexOf(org.geometerplus.fbreader.tree.FBTree) -> b
    java.lang.String getName() -> a
    java.lang.String getTreeTitle() -> i
    java.lang.String getSortKey() -> c
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
    java.lang.String getSummary() -> e
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> f
    boolean canUseParentCover() -> j
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> w
    org.geometerplus.fbreader.tree.FBTree$Status getOpeningStatus() -> g
    java.lang.String getOpeningStatusMessage() -> h
    void waitForOpening() -> l
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.tree.FBTree$Key -> org.geometerplus.a.h.b:
    org.geometerplus.fbreader.tree.FBTree$Key Parent -> a
    java.lang.String Id -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.tree.FBTree$Status -> org.geometerplus.a.h.c:
    org.geometerplus.fbreader.tree.FBTree$Status READY_TO_OPEN -> a
    org.geometerplus.fbreader.tree.FBTree$Status WAIT_FOR_OPEN -> b
    org.geometerplus.fbreader.tree.FBTree$Status ALWAYS_RELOAD_BEFORE_OPENING -> c
    org.geometerplus.fbreader.tree.FBTree$Status CANNOT_OPEN -> d
    org.geometerplus.fbreader.tree.FBTree$Status[] ENUM$VALUES -> e
    org.geometerplus.fbreader.tree.FBTree$Status[] values() -> a
org.geometerplus.zlibrary.core.application.ZLApplication -> org.geometerplus.zlibrary.a.a.a:
    org.geometerplus.zlibrary.core.application.ZLApplication ourInstance -> a
    org.geometerplus.zlibrary.core.application.ZLApplicationWindow myWindow -> b
    org.geometerplus.zlibrary.core.view.ZLView myView -> c
    java.util.HashMap myIdToActionMap -> d
    java.util.HashMap myPopups -> e
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel myActivePopup -> f
    java.util.Timer myTimer -> g
    java.util.HashMap myTimerTaskPeriods -> h
    java.util.HashMap myTimerTasks -> i
    java.lang.Object myTimerLock -> j
    org.geometerplus.zlibrary.core.application.ZLApplication Instance() -> k
    void setView(org.geometerplus.zlibrary.core.view.ZLView) -> a
    org.geometerplus.zlibrary.core.view.ZLView getCurrentView() -> l
    void setWindow(org.geometerplus.zlibrary.core.application.ZLApplicationWindow) -> a
    void initWindow() -> m
    void setTitle(java.lang.String) -> c
    void runWithMessage(java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void processException(java.lang.Exception) -> a
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> n
    void onRepaintFinished() -> o
    void onViewChanged() -> p
    void hideActivePopup() -> q
    void showPopup(java.lang.String) -> d
    void addAction(java.lang.String,org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction) -> a
    void removeAction(java.lang.String) -> e
    boolean isActionVisible(java.lang.String) -> f
    boolean isActionEnabled(java.lang.String) -> g
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isActionChecked(java.lang.String) -> h
    void runAction(java.lang.String,java.lang.Object[]) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> c
    boolean hasActionForKey(int,boolean) -> b
    boolean runActionByKey(int,boolean) -> c
    boolean closeWindow() -> r
    void onWindowClosing() -> g
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.Runnable) -> a
    java.util.Collection popupPanels() -> s
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getActivePopup() -> t
    org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel getPopupById(java.lang.String) -> i
    int getBatteryLevel() -> u
    void addTimerTaskInternal(java.lang.Runnable,long) -> b
    void startTimer() -> v
    void stopTimer() -> w
    void addTimerTask(java.lang.Runnable,long) -> a
    void removeTimerTask(java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
org.geometerplus.zlibrary.core.application.ZLApplication$MyTimerTask -> org.geometerplus.zlibrary.a.a.b:
    java.lang.Runnable myRunnable -> a
    void run() -> run
org.geometerplus.zlibrary.core.application.ZLApplication$PopupPanel -> org.geometerplus.zlibrary.a.a.c:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> c
    java.lang.String getId() -> c
    void update() -> a
    void hide_() -> f
    void show_() -> d
org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction -> org.geometerplus.zlibrary.a.a.d:
    boolean isVisible() -> b
    boolean isEnabled() -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 isChecked() -> c
    boolean checkAndRun(java.lang.Object[]) -> b
    void run(java.lang.Object[]) -> a
org.geometerplus.zlibrary.core.application.ZLApplicationWindow -> org.geometerplus.zlibrary.a.a.e:
    org.geometerplus.zlibrary.core.application.ZLApplication myApplication -> a
    org.geometerplus.zlibrary.core.application.ZLApplication getApplication() -> a
    void setTitle(java.lang.String) -> a
    void runWithMessage(java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void processException(java.lang.Exception) -> a
    void refresh() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void close() -> d
    int getBatteryLevel() -> e
org.geometerplus.zlibrary.core.application.ZLKeyBindings -> org.geometerplus.zlibrary.a.a.f:
    java.lang.String myName -> a
    org.geometerplus.zlibrary.core.options.ZLStringListOption myKeysOption -> b
    java.util.TreeMap myActionMap -> c
    java.util.TreeMap myLongPressActionMap -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption createOption(int,boolean,java.lang.String) -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption getOption(int,boolean) -> a
    void bindKey(int,boolean,java.lang.String) -> a
    java.lang.String getBinding(int,boolean) -> b
    java.util.TreeMap access$0(org.geometerplus.zlibrary.core.application.ZLKeyBindings) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption access$1(org.geometerplus.zlibrary.core.application.ZLKeyBindings,int,boolean,java.lang.String) -> a
org.geometerplus.zlibrary.core.application.ZLKeyBindings$Reader -> org.geometerplus.zlibrary.a.a.g:
    java.util.Set myKeySet -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings this$0 -> b
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.core.config.ZLConfig -> org.geometerplus.zlibrary.a.b.a:
    org.geometerplus.zlibrary.core.config.ZLConfig ourInstance -> a
    org.geometerplus.zlibrary.core.config.ZLConfig Instance() -> a
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
org.geometerplus.zlibrary.core.encodings.AutoEncodingCollection -> org.geometerplus.zlibrary.a.c.a:
    org.geometerplus.zlibrary.core.encodings.Encoding myEncoding -> a
    java.util.List encodings() -> f
org.geometerplus.zlibrary.core.encodings.Encoding -> org.geometerplus.zlibrary.a.c.b:
    java.lang.String Name -> a
    java.lang.String DisplayName -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.encodings.FilteredEncodingCollection -> org.geometerplus.zlibrary.a.c.c:
    java.util.List myEncodings -> a
    java.util.Map myEncodingByAlias -> b
    boolean isEncodingSupported(java.lang.String) -> b
    java.util.List encodings() -> f
    org.geometerplus.zlibrary.core.encodings.Encoding getEncoding(java.lang.String) -> c
    org.geometerplus.zlibrary.core.encodings.Encoding getEncoding(int) -> a
    java.util.List access$0(org.geometerplus.zlibrary.core.encodings.FilteredEncodingCollection) -> a
    java.util.Map access$1(org.geometerplus.zlibrary.core.encodings.FilteredEncodingCollection) -> b
org.geometerplus.zlibrary.core.encodings.FilteredEncodingCollection$EncodingCollectionReader -> org.geometerplus.zlibrary.a.c.d:
    java.lang.String myCurrentFamilyName -> a
    org.geometerplus.zlibrary.core.encodings.Encoding myCurrentEncoding -> b
    org.geometerplus.zlibrary.core.encodings.FilteredEncodingCollection this$0 -> c
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.core.encodings.JavaEncodingCollection -> org.geometerplus.zlibrary.a.c.e:
    org.geometerplus.zlibrary.core.encodings.JavaEncodingCollection ourInstance -> a
    org.geometerplus.zlibrary.core.encodings.JavaEncodingCollection Instance() -> g
    boolean isEncodingSupported(java.lang.String) -> b
    java.util.List encodings() -> f
    org.geometerplus.zlibrary.core.encodings.Encoding getEncoding(int) -> a
    org.geometerplus.zlibrary.core.encodings.Encoding getEncoding(java.lang.String) -> c
org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile -> org.geometerplus.zlibrary.a.d.a:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myParent -> a
    java.lang.String myName -> b
    java.lang.String normalizeEntryName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile createArchiveEntryFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean isDirectory() -> a
    java.lang.String getPath() -> b
    java.lang.String getLongName() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> e
org.geometerplus.zlibrary.core.filesystem.ZLFile -> org.geometerplus.zlibrary.a.d.b:
    java.util.HashMap ourCachedFiles -> a
    java.lang.String myExtension -> b
    java.lang.String myShortName -> d
    int myArchiveType -> c
    boolean myIsCached -> e
    void init() -> f
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFileByPath(java.lang.String) -> b
    long size() -> g
    boolean exists() -> h
    boolean isDirectory() -> a
    java.lang.String getPath() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> e
    java.io.InputStream getInputStream() -> i
    boolean isReadable() -> j
    boolean isArchive() -> k
    java.lang.String getLongName() -> c
    java.lang.String getShortName() -> l
    java.lang.String getExtension() -> m
    java.util.List directoryEntries() -> n
    java.util.List children() -> o
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isCached() -> p
    void setCached(boolean) -> a
org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile -> org.geometerplus.zlibrary.a.d.c:
    java.io.File myFile -> a
    boolean exists() -> h
    long size() -> g
    boolean isDirectory() -> a
    boolean isReadable() -> j
    boolean delete() -> q
    java.io.File javaFile() -> r
    java.lang.String getPath() -> b
    java.lang.String getLongName() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> d
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> e
    java.io.InputStream getInputStream() -> i
    java.util.List directoryEntries() -> n
org.geometerplus.zlibrary.core.filesystem.ZLResourceFile -> org.geometerplus.zlibrary.a.d.d:
    java.lang.String myPath -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    java.lang.String getPath() -> b
    java.lang.String getLongName() -> c
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> e
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile -> org.geometerplus.zlibrary.a.d.e:
    java.util.HashMap ourZipFileMap -> d
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.amse.ys.zip.ZipFile getZipFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    void removeFromCache(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    boolean exists() -> h
    long size() -> g
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile$1 -> org.geometerplus.zlibrary.a.d.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> a
    java.io.InputStream getInputStream() -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarEntryFile -> org.geometerplus.zlibrary.a.d.a.a:
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    boolean exists() -> h
    long size() -> g
    java.io.InputStream getInputStream() -> i
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarHeader -> org.geometerplus.zlibrary.a.d.a.b:
    java.lang.String Name -> a
    int Size -> b
    boolean IsRegularFile -> c
    java.lang.String getStringFromByteArray(byte[]) -> a
    boolean read(java.io.InputStream) -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarInputStream -> org.geometerplus.zlibrary.a.d.a.c:
    java.io.InputStream myBase -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
org.geometerplus.zlibrary.core.html.ZLByteBuffer -> org.geometerplus.zlibrary.a.e.a:
    byte[] myData -> a
    int myLength -> b
    java.lang.Object myConverterLock -> c
    char[] myConverterBuffer -> d
    java.lang.String myStringValue -> e
    boolean isEmpty() -> a
    void append(byte[],int,int) -> a
    void clear() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsToLCString(java.lang.String) -> a
    java.lang.String toString(java.nio.charset.CharsetDecoder) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap -> org.geometerplus.zlibrary.a.e.b:
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myKeys -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myValues -> b
    int mySize -> c
    void put(org.geometerplus.zlibrary.core.html.ZLByteBuffer,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer getValue(java.lang.String) -> a
    void clear() -> a
org.geometerplus.zlibrary.core.html.ZLHtmlParser -> org.geometerplus.zlibrary.a.e.c:
    org.geometerplus.zlibrary.core.html.ZLHtmlReader myReader -> a
    java.io.InputStream myStream -> b
    org.geometerplus.zlibrary.core.html.ZLByteBuffer unique(java.util.HashMap,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    void doIt() -> a
    void processStartTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void processEndTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlProcessor -> org.geometerplus.zlibrary.a.e.d:
    boolean read(org.geometerplus.zlibrary.core.html.ZLHtmlReader,java.io.InputStream) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlReader -> org.geometerplus.zlibrary.a.e.e:
    void startDocumentHandler() -> p
    void endDocumentHandler() -> q
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(java.lang.String) -> d
    void byteDataHandler(byte[],int,int) -> b
    void entityDataHandler(java.lang.String) -> c
org.geometerplus.zlibrary.core.image.ZLBase64EncodedImage -> org.geometerplus.zlibrary.a.f.a:
    boolean myIsDecoded -> a
    byte decodeByte(byte) -> a
    java.lang.String getURI() -> a_
    java.lang.String encodedFileName() -> b
    java.lang.String decodedFileName() -> c
    boolean isCacheValid(java.io.File) -> a
    void decode() -> a
    java.io.InputStream inputStream() -> f
org.geometerplus.zlibrary.core.image.ZLFileImage -> org.geometerplus.zlibrary.a.f.b:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    java.lang.String myEncoding -> b
    int myOffset -> c
    int myLength -> d
    org.geometerplus.zlibrary.core.image.ZLFileImage byUrlPath(java.lang.String) -> a
    java.lang.String getURI() -> a_
    java.io.InputStream inputStream() -> f
org.geometerplus.zlibrary.core.image.ZLImage -> org.geometerplus.zlibrary.a.f.c:
    java.lang.String getURI() -> a_
org.geometerplus.zlibrary.core.image.ZLImageData -> org.geometerplus.zlibrary.a.f.d:
org.geometerplus.zlibrary.core.image.ZLImageManager -> org.geometerplus.zlibrary.a.f.e:
    org.geometerplus.zlibrary.core.image.ZLImageManager ourInstance -> a
    org.geometerplus.zlibrary.core.image.ZLImageManager Instance() -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.image.ZLImageProxy -> org.geometerplus.zlibrary.a.f.f:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    java.lang.String getURI() -> a_
    java.io.InputStream inputStream() -> f
    void synchronize() -> d
    void synchronizeFast() -> e
org.geometerplus.zlibrary.core.image.ZLLoadableImage -> org.geometerplus.zlibrary.a.f.g:
    boolean myIsSynchronized -> a
    boolean isSynchronized() -> g
    void setSynchronized() -> h
    void startSynchronization(java.lang.Runnable) -> a
    int sourceType() -> a
    void synchronize() -> d
    void synchronizeFast() -> e
    java.lang.String getId() -> b
org.geometerplus.zlibrary.core.image.ZLSingleImage -> org.geometerplus.zlibrary.a.f.h:
    org.geometerplus.zlibrary.core.util.MimeType myMimeType -> a
    java.io.InputStream inputStream() -> f
    org.geometerplus.zlibrary.core.util.MimeType mimeType() -> i
org.geometerplus.zlibrary.core.language.ZLLanguageUtil -> org.geometerplus.zlibrary.a.g.a:
    java.util.ArrayList ourLanguageCodes -> a
    java.lang.String defaultLanguageCode() -> a
    java.util.List languageCodes() -> b
    java.lang.String languageName(java.lang.String) -> a
    java.lang.String languageByIntCode(int,int) -> a
org.geometerplus.zlibrary.core.language.ZLLanguageUtil$CodeComparator -> org.geometerplus.zlibrary.a.g.b:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.zlibrary.core.library.ZLibrary -> org.geometerplus.zlibrary.a.h.a:
    org.geometerplus.zlibrary.core.library.ZLibrary ourImplementation -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption OrientationOption -> a
    org.geometerplus.zlibrary.core.library.ZLibrary Instance() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    int getPixelWidth() -> f
    int getPixelHeight() -> g
    java.util.Collection defaultLanguageCodes() -> h
    boolean supportsAllOrientations() -> i
org.geometerplus.zlibrary.core.money.Money -> org.geometerplus.zlibrary.a.i.a:
    org.geometerplus.zlibrary.core.money.Money ZERO -> a
    java.math.BigDecimal Amount -> b
    java.lang.String Currency -> c
    org.geometerplus.zlibrary.core.money.Money add(org.geometerplus.zlibrary.core.money.Money) -> a
    org.geometerplus.zlibrary.core.money.Money subtract(org.geometerplus.zlibrary.core.money.Money) -> b
    int compareTo(org.geometerplus.zlibrary.core.money.Money) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.core.money.MoneyException -> org.geometerplus.zlibrary.a.i.b:
org.geometerplus.zlibrary.core.network.CookieDatabase -> org.geometerplus.zlibrary.a.j.a:
    org.geometerplus.zlibrary.core.network.CookieDatabase ourInstance -> a
    org.geometerplus.zlibrary.core.network.CookieDatabase getInstance() -> a
    void removeObsolete(java.util.Date) -> a
    void removeAll() -> b
    void saveCookies(java.util.List) -> a
    java.util.List loadCookies() -> c
org.geometerplus.zlibrary.core.network.ZLNetworkException -> org.geometerplus.zlibrary.a.j.b:
    java.lang.String myCode -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource() -> b
    java.lang.String errorMessage(java.lang.String,java.lang.String) -> a
    java.lang.String getCode() -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager -> org.geometerplus.zlibrary.a.j.c:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager ourManager -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator myCredentialsCreator -> b
    org.apache.http.client.CookieStore myCookieStore -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkManager Instance() -> a
    void setCredentialsCreator(org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator getCredentialsCreator() -> b
    void perform(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    void perform(java.util.List) -> a
    void downloadToFile(java.lang.String,java.io.File) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator access$0(org.geometerplus.zlibrary.core.network.ZLNetworkManager) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$1 -> org.geometerplus.zlibrary.a.j.d:
    java.util.HashMap myCookies -> a
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void clear() -> clear
    boolean clearExpired(java.util.Date) -> clearExpired
    java.util.List getCookies() -> getCookies
org.geometerplus.zlibrary.core.network.ZLNetworkManager$2 -> org.geometerplus.zlibrary.a.j.e:
    java.io.File val$outFile -> a
    int val$bufferSize -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$AuthScopeKey -> org.geometerplus.zlibrary.a.j.f:
    org.apache.http.auth.AuthScope myScope -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator -> org.geometerplus.zlibrary.a.j.g:
    java.util.HashMap myCredentialsMap -> a
    java.lang.String myUsername -> b
    java.lang.String myPassword -> c
    void setCredentials(java.lang.String,java.lang.String) -> a
    void release() -> a
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope,boolean) -> a
    boolean removeCredentials(org.geometerplus.zlibrary.core.network.ZLNetworkManager$AuthScopeKey) -> a
    void startAuthenticationDialog(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$Key -> org.geometerplus.zlibrary.a.j.h:
    java.lang.String Domain -> a
    java.lang.String Path -> b
    java.lang.String Name -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.network.ZLNetworkManager$MyCredentialsProvider -> org.geometerplus.zlibrary.a.j.i:
    org.apache.http.client.methods.HttpUriRequest myRequest -> a
    boolean myQuietly -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> c
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
org.geometerplus.zlibrary.core.network.ZLNetworkRequest -> org.geometerplus.zlibrary.a.j.j:
    java.lang.String URL -> b
    java.lang.String PostData -> c
    java.util.Map PostParameters -> d
    boolean myIsQuiet -> a
    void addPostParameter(java.lang.String,java.lang.String) -> a
    java.lang.String getURL() -> b
    boolean isQuiet() -> c
    void handleStream(java.io.InputStream,int) -> a
    void doAfter$1385ff() -> a
org.geometerplus.zlibrary.core.options.ZLBoolean3Option -> org.geometerplus.zlibrary.a.k.a:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myValue -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myDefaultValue -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLBoolean3) -> a
org.geometerplus.zlibrary.core.options.ZLBooleanOption -> org.geometerplus.zlibrary.a.k.b:
    boolean myDefaultValue -> a
    boolean myValue -> b
    boolean getValue() -> a
    void setValue(boolean) -> a
org.geometerplus.zlibrary.core.options.ZLColorOption -> org.geometerplus.zlibrary.a.k.c:
    org.geometerplus.zlibrary.core.util.ZLColor myDefaultValue -> a
    org.geometerplus.zlibrary.core.util.ZLColor myValue -> b
    org.geometerplus.zlibrary.core.util.ZLColor getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLColor) -> a
org.geometerplus.zlibrary.core.options.ZLEnumOption -> org.geometerplus.zlibrary.a.k.d:
    java.lang.Enum myDefaultValue -> a
    java.lang.Enum myValue -> b
    java.lang.Enum getValue() -> a
    void setValue(java.lang.Enum) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerOption -> org.geometerplus.zlibrary.a.k.e:
    int myDefaultValue -> a
    int myValue -> b
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption -> org.geometerplus.zlibrary.a.k.f:
    int MinValue -> a
    int MaxValue -> b
    int myDefaultValue -> d
    int myValue -> e
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLOption -> org.geometerplus.zlibrary.a.k.g:
    java.lang.String myGroup -> a
    java.lang.String myOptionName -> b
    boolean myIsSynchronized -> c
    java.lang.String getConfigValue(java.lang.String) -> a
    void setConfigValue(java.lang.String) -> b
    void unsetConfigValue() -> b
org.geometerplus.zlibrary.core.options.ZLStringListOption -> org.geometerplus.zlibrary.a.k.h:
    java.util.List myDefaultValue -> a
    java.util.List myValue -> b
    java.lang.String myDelimiter -> d
    java.util.List getValue() -> a
    void setValue(java.util.List) -> a
org.geometerplus.zlibrary.core.options.ZLStringOption -> org.geometerplus.zlibrary.a.k.i:
    java.lang.String myDefaultValue -> a
    java.lang.String myValue -> b
    java.lang.String getValue() -> a
    void setValue(java.lang.String) -> c
org.geometerplus.zlibrary.core.resources.ZLMissingResource -> org.geometerplus.zlibrary.a.l.a:
    org.geometerplus.zlibrary.core.resources.ZLMissingResource Instance -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
org.geometerplus.zlibrary.core.resources.ZLResource -> org.geometerplus.zlibrary.a.l.b:
    org.geometerplus.zlibrary.core.resources.ZLResource resource(java.lang.String) -> b
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource -> org.geometerplus.zlibrary.a.l.c:
    org.geometerplus.zlibrary.core.resources.ZLTreeResource ourRoot -> a
    java.lang.Object ourLock -> b
    long ourTimeStamp -> c
    java.lang.String ourLanguage -> d
    java.lang.String ourCountry -> e
    boolean myHasValue -> f
    java.lang.String myValue -> g
    java.util.HashMap myChildren -> h
    java.util.LinkedHashMap myConditionalValues -> i
    org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition parseCondition(java.lang.String) -> d
    void buildTree() -> c
    void updateLanguage() -> d
    void loadData(org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader,java.lang.String) -> a
    void loadData() -> e
    void setValue(java.lang.String) -> e
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    java.lang.String getValue(int) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> a
    void access$1(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.HashMap) -> a
    void access$3(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.lang.String) -> a
    void access$4(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.LinkedHashMap) -> a
    org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition access$5(java.lang.String) -> c
    java.util.LinkedHashMap access$6(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> b
org.geometerplus.zlibrary.core.resources.ZLTreeResource$Condition -> org.geometerplus.zlibrary.a.l.d:
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ModCondition -> org.geometerplus.zlibrary.a.l.e:
    int myMod -> a
    int myBase -> b
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ModRangeCondition -> org.geometerplus.zlibrary.a.l.f:
    int myMin -> a
    int myMax -> b
    int myBase -> c
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$RangeCondition -> org.geometerplus.zlibrary.a.l.g:
    int myMin -> a
    int myMax -> b
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader -> org.geometerplus.zlibrary.a.l.h:
    java.util.ArrayList myStack -> a
    void readDocument(org.geometerplus.zlibrary.core.resources.ZLTreeResource,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ValueCondition -> org.geometerplus.zlibrary.a.l.i:
    int myValue -> a
    boolean accepts(int) -> a
org.geometerplus.zlibrary.core.sqliteconfig.ZLSQLiteConfig -> org.geometerplus.zlibrary.a.m.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myGetValueStatement -> b
    android.database.sqlite.SQLiteStatement mySetValueStatement -> c
    android.database.sqlite.SQLiteStatement myUnsetValueStatement -> d
    android.database.sqlite.SQLiteStatement myDeleteGroupStatement -> e
    java.util.List listGroups() -> b
    java.util.List listNames(java.lang.String) -> a
    void removeGroup(java.lang.String) -> b
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.tree.ZLTree -> org.geometerplus.zlibrary.a.n.a:
    int mySize -> a
    org.geometerplus.zlibrary.core.tree.ZLTree Parent -> d
    int Level -> e
    java.util.List mySubTrees -> b
    int getSize() -> x
    boolean hasChildren() -> y
    java.util.List subTrees() -> c_
    org.geometerplus.zlibrary.core.tree.ZLTree getTreeByParagraphNumber(int) -> b
    void addSubTree(org.geometerplus.zlibrary.core.tree.ZLTree,int) -> a
    void removeSelf() -> z
    void clear() -> A
    java.lang.Iterable allSubTrees(int) -> c
    java.util.Iterator iterator() -> iterator
    java.util.List access$1(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.zlibrary.core.tree.ZLTree$1 -> org.geometerplus.zlibrary.a.n.b:
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> a
    int val$maxLevel -> b
    java.util.Iterator iterator() -> iterator
org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator -> org.geometerplus.zlibrary.a.n.c:
    org.geometerplus.zlibrary.core.tree.ZLTree myCurrentElement -> a
    java.util.LinkedList myIndexStack -> b
    int myMaxLevel -> c
    boolean hasNext() -> hasNext
    org.geometerplus.zlibrary.core.tree.ZLTree next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.geometerplus.zlibrary.core.util.Base64InputStream -> org.geometerplus.zlibrary.a.o.a:
    java.io.InputStream myBaseStream -> a
    int myDecoded0 -> b
    int myDecoded1 -> c
    int myDecoded2 -> d
    byte[] myBuffer -> e
    int myBufferOffset -> f
    int myBufferLength -> g
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    void reset() -> reset
    void fillDecodedBuffer() -> a
    void fillBuffer() -> b
    int decode(byte) -> a
org.geometerplus.zlibrary.core.util.HexInputStream -> org.geometerplus.zlibrary.a.o.b:
    java.io.InputStream myBaseStream -> a
    byte[] myBuffer -> b
    int myBufferOffset -> c
    int myBufferLength -> d
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    void reset() -> reset
    void fillBuffer() -> a
    int decode(byte) -> a
org.geometerplus.zlibrary.core.util.MimeType -> org.geometerplus.zlibrary.a.o.c:
    java.util.Map ourSimpleTypesMap -> w
    org.geometerplus.zlibrary.core.util.MimeType APP_ZIP -> a
    org.geometerplus.zlibrary.core.util.MimeType APP_EPUB_ZIP -> b
    org.geometerplus.zlibrary.core.util.MimeType APP_MOBIPOCKET -> c
    org.geometerplus.zlibrary.core.util.MimeType APP_PDF -> x
    org.geometerplus.zlibrary.core.util.MimeType APP_RTF -> y
    org.geometerplus.zlibrary.core.util.MimeType APP_MSWORD -> z
    org.geometerplus.zlibrary.core.util.MimeType APP_FB2_ZIP -> d
    org.geometerplus.zlibrary.core.util.MimeType APP_ATOM_XML -> e
    org.geometerplus.zlibrary.core.util.MimeType APP_OPENSEARCHDESCRIPTION -> f
    org.geometerplus.zlibrary.core.util.MimeType APP_LITRES -> g
    org.geometerplus.zlibrary.core.util.MimeType TEXT_XML -> h
    org.geometerplus.zlibrary.core.util.MimeType TEXT_HTML -> i
    org.geometerplus.zlibrary.core.util.MimeType TEXT_XHTML -> j
    org.geometerplus.zlibrary.core.util.MimeType TEXT_PLAIN -> A
    org.geometerplus.zlibrary.core.util.MimeType TEXT_RTF -> B
    org.geometerplus.zlibrary.core.util.MimeType TEXT_FB2 -> k
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PNG -> l
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_JPEG -> m
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_AUTO -> n
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PALM -> o
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_VND_DJVU -> p
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_XDJVU -> C
    org.geometerplus.zlibrary.core.util.MimeType UNKNOWN -> q
    org.geometerplus.zlibrary.core.util.MimeType NULL -> r
    java.util.List TYPES_TXT -> s
    java.util.List TYPES_RTF -> t
    java.util.List TYPES_PDF -> u
    java.lang.String Name -> v
    java.util.Map myParameters -> D
    org.geometerplus.zlibrary.core.util.MimeType get(java.lang.String) -> a
    java.lang.String getParameter(java.lang.String) -> b
    boolean equals(java.lang.Object) -> equals
    boolean weakEquals(org.geometerplus.zlibrary.core.util.MimeType) -> a
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.SliceInputStream -> org.geometerplus.zlibrary.a.o.d:
    int myStart -> a
    int myLength -> b
    int read() -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
    void reset() -> reset
    int offset() -> a
org.geometerplus.zlibrary.core.util.ZLBoolean3 -> org.geometerplus.zlibrary.a.o.e:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_FALSE -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_TRUE -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_UNDEFINED -> c
    java.lang.String Name -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getByName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] values() -> a
org.geometerplus.zlibrary.core.util.ZLColor -> org.geometerplus.zlibrary.a.o.f:
    short Red -> a
    short Green -> b
    short Blue -> c
    int getIntValue() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset -> org.geometerplus.zlibrary.a.o.g:
    java.io.InputStream myDecoratedStream -> a
    int myOffset -> b
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    void reset() -> reset
    int offset() -> a
org.geometerplus.zlibrary.core.util.ZLSearchPattern -> org.geometerplus.zlibrary.a.o.h:
    boolean IgnoreCase -> a
    char[] LowerCasePattern -> b
    char[] UpperCasePattern -> c
    int getLength() -> a
org.geometerplus.zlibrary.core.util.ZLSearchUtil -> org.geometerplus.zlibrary.a.o.i:
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern) -> a
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern,int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfo -> org.geometerplus.zlibrary.a.o.j:
    java.lang.String FamilyName -> a
    java.lang.String SubFamilyName -> b
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector -> org.geometerplus.zlibrary.a.o.k:
    java.io.InputStream myStream -> a
    int myPosition -> b
    java.util.Map collectFonts(java.lang.Iterable) -> a
    org.geometerplus.zlibrary.core.util.ZLTTFInfo detectInfo(java.io.File) -> a
    int getInt16(byte[],int) -> b
    org.geometerplus.zlibrary.core.util.ZLTTFInfo readFontInfo(org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo) -> a
    int access$0(byte[],int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo -> org.geometerplus.zlibrary.a.o.l:
    java.lang.String Name -> a
    int Offset -> b
    int Length -> c
org.geometerplus.zlibrary.core.view.DummyPaintContext -> org.geometerplus.zlibrary.a.p.a:
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> d
    int getStringHeightInternal() -> e
    int getDescentInternal() -> f
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLPaintContext -> org.geometerplus.zlibrary.a.p.b:
    boolean myResetFont -> a
    java.lang.String myFontFamily -> b
    int myFontSize -> c
    boolean myFontIsBold -> d
    boolean myFontIsItalic -> e
    boolean myFontIsUnderlined -> f
    boolean myFontIsStrikedThrough -> g
    int mySpaceWidth -> h
    int myStringHeight -> i
    int myDescent -> j
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void setFont(java.lang.String,int,boolean,boolean,boolean,boolean) -> b
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidth() -> g
    int getSpaceWidthInternal() -> d
    int getStringHeight() -> h
    int getStringHeightInternal() -> e
    int getDescent() -> i
    int getDescentInternal() -> f
    void drawString(int,int,java.lang.String) -> a
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void drawPolygonalLine(int[],int[]) -> b
    void fillPolygon(int[],int[]) -> a
    void drawOutline(int[],int[]) -> c
org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType -> org.geometerplus.zlibrary.a.p.c:
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType OriginalSize -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType IntegerCoefficient -> b
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType FitMaximum -> c
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType[] ENUM$VALUES -> d
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType[] values() -> a
org.geometerplus.zlibrary.core.view.ZLPaintContext$Size -> org.geometerplus.zlibrary.a.p.d:
    int Width -> a
    int Height -> b
    boolean equals(java.lang.Object) -> equals
org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode -> org.geometerplus.zlibrary.a.p.e:
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode TILE -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode TILE_MIRROR -> b
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode[] ENUM$VALUES -> c
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode[] values() -> a
org.geometerplus.zlibrary.core.view.ZLView -> org.geometerplus.zlibrary.a.p.f:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext myContext -> b
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> p
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> o
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    boolean onFingerPress(int,int) -> c
    boolean onFingerRelease(int,int) -> e
    boolean onFingerMove(int,int) -> d
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerSingleTap(int,int) -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean isDoubleTapSupported() -> a
    boolean onTrackballRotated(int,int) -> i
    boolean isScrollbarShown() -> q
    int getScrollbarFullSize() -> r
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
org.geometerplus.zlibrary.core.view.ZLView$Animation -> org.geometerplus.zlibrary.a.p.g:
    org.geometerplus.zlibrary.core.view.ZLView$Animation none -> a
    org.geometerplus.zlibrary.core.view.ZLView$Animation curl -> b
    org.geometerplus.zlibrary.core.view.ZLView$Animation slide -> c
    org.geometerplus.zlibrary.core.view.ZLView$Animation shift -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] values() -> a
org.geometerplus.zlibrary.core.view.ZLView$Direction -> org.geometerplus.zlibrary.a.p.h:
    org.geometerplus.zlibrary.core.view.ZLView$Direction leftToRight -> a
    org.geometerplus.zlibrary.core.view.ZLView$Direction rightToLeft -> b
    org.geometerplus.zlibrary.core.view.ZLView$Direction up -> c
    org.geometerplus.zlibrary.core.view.ZLView$Direction down -> d
    boolean IsHorizontal -> e
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] values() -> a
org.geometerplus.zlibrary.core.view.ZLView$FooterArea -> org.geometerplus.zlibrary.a.p.i:
    int getHeight() -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.core.view.ZLView$PageIndex -> org.geometerplus.zlibrary.a.p.j:
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex previous -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex current -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex next -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> d
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getNext() -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPrevious() -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] values() -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> d
org.geometerplus.zlibrary.core.view.ZLViewWidget -> org.geometerplus.zlibrary.a.p.k:
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
org.geometerplus.zlibrary.core.xml.ZLDTDParser -> org.geometerplus.zlibrary.a.q.a:
    void doIt(java.io.InputStream,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLMutableString -> org.geometerplus.zlibrary.a.q.b:
    char[] myData -> a
    int myLength -> b
    void append(char[],int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.xml.ZLStringMap -> org.geometerplus.zlibrary.a.q.c:
    java.lang.String[] myKeys -> a
    java.lang.String[] myValues -> b
    int mySize -> c
    void put(java.lang.String,java.lang.String) -> a
    java.lang.String getValue(java.lang.String) -> a
    int getSize() -> a
    java.lang.String getKey(int) -> a
    java.lang.String getValue(int) -> b
    void clear() -> b
org.geometerplus.zlibrary.core.xml.ZLXMLParser -> org.geometerplus.zlibrary.a.q.d:
    java.io.InputStreamReader myStreamReader -> a
    org.geometerplus.zlibrary.core.xml.ZLXMLProcessor myXMLReader$3627b7cd -> b
    boolean myProcessNamespaces -> c
    java.util.HashMap ourBufferPool -> d
    java.util.Queue ourStringPool -> e
    char[] myBuffer -> f
    int myBufferDescriptionLength -> g
    org.geometerplus.zlibrary.core.xml.ZLMutableString myTagName -> h
    org.geometerplus.zlibrary.core.xml.ZLMutableString myCData -> i
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeName -> j
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeValue -> k
    org.geometerplus.zlibrary.core.xml.ZLMutableString myEntityName -> l
    java.util.HashMap ourDTDMaps -> m
    java.lang.String convertToString(java.util.Map,org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    char[] getBuffer(int) -> a
    void storeBuffer(char[]) -> a
    org.geometerplus.zlibrary.core.xml.ZLMutableString getMutableString() -> c
    void storeString(org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    void finish() -> a
    char[] getEntityValue(java.util.HashMap,java.lang.String) -> a
    java.util.HashMap getDTDMap(java.util.List) -> a
    void doIt() -> b
    boolean processFullTag$ef14548(org.geometerplus.zlibrary.core.xml.ZLXMLProcessor,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processStartTag$55e65283(org.geometerplus.zlibrary.core.xml.ZLXMLProcessor,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLProcessor -> org.geometerplus.zlibrary.a.q.e:
    java.util.Map myNamespaceMap -> a
    java.util.Map getEntityMap(java.util.List) -> a
    void read$2d66f048(org.geometerplus.zlibrary.core.xml.ZLXMLProcessor,java.io.InputStream,int) -> a
    void read$22803aca(org.geometerplus.zlibrary.core.xml.ZLXMLProcessor,org.geometerplus.zlibrary.core.filesystem.ZLFile,int) -> a
    boolean dontCacheAttributeValues() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> b
    void namespaceMapChangedHandler(java.util.Map) -> a
    void collectExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
    boolean readQuietly(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    void read(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void read(java.io.InputStream) -> a
    boolean testTag(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.String getAttributeValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo -> org.geometerplus.zlibrary.b.a.a:
    boolean[] Mask -> a
    boolean isHyphenationPossible(int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationReader -> org.geometerplus.zlibrary.b.a.b:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator myHyphenator -> a
    boolean myReadPattern -> b
    char[] myBuffer -> c
    int myBufferLength -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator -> org.geometerplus.zlibrary.b.a.c:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator ourInstance -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator Instance() -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo getInfo(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern -> org.geometerplus.zlibrary.b.a.d:
    int myLength -> a
    char[] mySymbols -> b
    byte[] myValues -> d
    int myHashCode -> c
    void apply(byte[],int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator -> org.geometerplus.zlibrary.b.a.e:
    java.util.HashMap myPatternTable -> a
    java.lang.String myLanguage -> b
    java.util.List myLanguageCodes -> c
    void addPattern(org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern) -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.model.CachedCharStorage -> org.geometerplus.zlibrary.b.b.a:
    int myBlockSize -> b
    char[] createNewBlock(int) -> a
    void freezeLastBlock() -> a
    char[] block(int) -> b
    int size() -> b
org.geometerplus.zlibrary.text.model.CachedCharStorageException -> org.geometerplus.zlibrary.b.b.b:
org.geometerplus.zlibrary.text.model.CharStorage -> org.geometerplus.zlibrary.b.b.c:
    java.util.ArrayList myArray -> a
    java.lang.String myDirectoryName -> b
    java.lang.String myFileExtension -> c
    int size() -> b
    char[] block(int) -> b
    char[] createNewBlock(int) -> a
    void freezeLastBlock() -> a
    java.lang.String fileName(int) -> c
org.geometerplus.zlibrary.text.model.ZLImageEntry -> org.geometerplus.zlibrary.b.b.d:
    java.util.Map myImageMap -> c
    java.lang.String Id -> a
    boolean IsCover -> b
    org.geometerplus.zlibrary.core.image.ZLImage getImage() -> a
org.geometerplus.zlibrary.text.model.ZLTextMark -> org.geometerplus.zlibrary.b.b.e:
    int ParagraphIndex -> a
    int Offset -> b
    int Length -> c
    int compareTo(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.model.ZLTextMetrics -> org.geometerplus.zlibrary.b.b.f:
    int DPI -> a
    int DefaultFontSize -> b
    int FontSize -> c
    int FontXHeight -> d
    int FullWidth -> e
    int FullHeight -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.model.ZLTextModel -> org.geometerplus.zlibrary.b.b.g:
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    void removeAllMarks() -> d
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    java.util.List getMarks() -> e
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
    int search(java.lang.String,int,int,boolean) -> a
org.geometerplus.zlibrary.text.model.ZLTextParagraph -> org.geometerplus.zlibrary.b.b.h:
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel myModel -> a
    int myIndex -> b
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator -> org.geometerplus.zlibrary.b.b.i:
    int myCounter -> d
    int myLength -> e
    byte myType -> f
    int myDataIndex -> a
    int myDataOffset -> b
    char[] myTextData -> g
    int myTextOffset -> h
    int myTextLength -> i
    byte myControlKind -> j
    boolean myControlIsStart -> k
    byte myHyperlinkType -> l
    java.lang.String myHyperlinkId -> m
    org.geometerplus.zlibrary.text.model.ZLImageEntry myImageEntry -> n
    org.geometerplus.zlibrary.text.model.ZLTextStyleEntry myStyleEntry -> o
    short myFixedHSpaceLength -> p
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel this$0 -> c
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    org.geometerplus.zlibrary.text.model.ZLTextStyleEntry getStyleEntry() -> j
    short getFixedHSpaceLength() -> k
    boolean hasNext() -> l
    void next() -> m
    void reset(int) -> a
org.geometerplus.zlibrary.text.model.ZLTextPlainModel -> org.geometerplus.zlibrary.b.b.j:
    java.lang.String myId -> i
    java.lang.String myLanguage -> j
    int[] myStartEntryIndices -> a
    int[] myStartEntryOffsets -> b
    int[] myParagraphLengths -> c
    int[] myTextSizes -> d
    byte[] myParagraphKinds -> e
    int myParagraphsNumber -> f
    org.geometerplus.zlibrary.text.model.CharStorage myStorage -> g
    java.util.Map myImageMap -> h
    java.util.ArrayList myMarks -> k
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    int search(java.lang.String,int,int,boolean) -> a
    java.util.List getMarks() -> e
    void removeAllMarks() -> d
    int getParagraphsNumber() -> c
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
org.geometerplus.zlibrary.text.model.ZLTextSpecialParagraphImpl -> org.geometerplus.zlibrary.b.b.k:
    byte myKind -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextStyleEntry -> org.geometerplus.zlibrary.b.b.l:
    short myFeatureMask -> a
    org.geometerplus.zlibrary.text.model.ZLTextStyleEntry$Length[] myLengths -> b
    byte myAlignmentType -> c
    byte mySupportedFontModifiers -> d
    byte myFontModifiers -> e
    boolean isFeatureSupported(short,int) -> a
    boolean isFeatureSupported(int) -> a
    void setLength(int,short,byte) -> a
    int getLength(int,org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> a
    void setAlignmentType(byte) -> a
    byte getAlignmentType() -> a
    void setFontFamily(java.lang.String) -> a
    void setFontModifiers(byte,byte) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getFontModifier(byte) -> b
org.geometerplus.zlibrary.text.model.ZLTextStyleEntry$Length -> org.geometerplus.zlibrary.b.b.m:
    short Size -> a
    byte Unit -> b
org.geometerplus.zlibrary.text.model.ZLTextWritableModel -> org.geometerplus.zlibrary.b.b.n:
    void createParagraph(byte) -> a
    void addText(char[],int,int) -> a
    void addImage(java.lang.String,short,boolean) -> a
    void addControl(byte,boolean) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.model.ZLTextWritablePlainModel -> org.geometerplus.zlibrary.b.b.o:
    char[] myCurrentDataBlock -> i
    int myBlockOffset -> j
    void createParagraph(byte) -> a
    char[] getDataBlock(int) -> d
    void addText(char[],int,int) -> a
    void addImage(java.lang.String,short,boolean) -> a
    void addControl(byte,boolean) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting -> org.geometerplus.zlibrary.b.c.a:
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextControlElement -> org.geometerplus.zlibrary.b.c.b:
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myStartElements -> g
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myEndElements -> h
    byte Kind -> a
    boolean IsStart -> b
    org.geometerplus.zlibrary.text.view.ZLTextControlElement get(byte,boolean) -> a
org.geometerplus.zlibrary.text.view.ZLTextElement -> org.geometerplus.zlibrary.b.c.c:
    org.geometerplus.zlibrary.text.view.ZLTextElement HSpace -> c
    org.geometerplus.zlibrary.text.view.ZLTextElement AfterParagraph -> d
    org.geometerplus.zlibrary.text.view.ZLTextElement Indent -> e
    org.geometerplus.zlibrary.text.view.ZLTextElement StyleClose -> f
org.geometerplus.zlibrary.text.view.ZLTextElementArea -> org.geometerplus.zlibrary.b.c.d:
    int XStart -> a
    int XEnd -> b
    int YStart -> c
    int YEnd -> d
    boolean AddHyphenationSign -> e
    boolean ChangeStyle -> f
    org.geometerplus.zlibrary.text.view.ZLTextStyle Style -> g
    org.geometerplus.zlibrary.text.view.ZLTextElement Element -> h
    boolean myIsLastInElement -> l
    boolean isFirstInElement() -> a
    boolean isLastInElement() -> b
org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector -> org.geometerplus.zlibrary.b.c.e:
    java.util.List myAreas -> a
    java.util.List myElementRegions -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion myCurrentElementRegion -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> d
    void clear() -> a
    int size() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea get(int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    boolean add(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstAfter(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastBefore(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion,org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> e
org.geometerplus.zlibrary.text.view.ZLTextFixedHSpaceElement -> org.geometerplus.zlibrary.b.c.f:
    org.geometerplus.zlibrary.text.view.ZLTextElement[] ourCollection -> b
    short Length -> a
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextFixedPosition -> org.geometerplus.zlibrary.b.c.g:
    int ParagraphIndex -> i
    int ElementIndex -> j
    int CharIndex -> k
    int getParagraphIndex() -> h
    int getElementIndex() -> i
    int getCharIndex() -> j
org.geometerplus.zlibrary.text.view.ZLTextHighlighting -> org.geometerplus.zlibrary.b.c.h:
    org.geometerplus.zlibrary.text.view.ZLTextPosition myStartPosition -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition myEndPosition -> b
    void setup(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean clear() -> b
    boolean isEmpty() -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull -> org.geometerplus.zlibrary.b.c.i:
    java.util.LinkedList myRectangles -> a
    void addArea(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    void normalize() -> a
    int distanceTo(int,int) -> a
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull$Rectangle -> org.geometerplus.zlibrary.b.c.j:
    int Left -> a
    int Right -> b
    int Top -> c
    int Bottom -> d
org.geometerplus.zlibrary.text.view.ZLTextHyperlink -> org.geometerplus.zlibrary.b.c.k:
    byte Type -> a
    java.lang.String Id -> b
    java.util.List myElementIndexes -> e
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink NO_LINK -> c
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink FOOTER -> d
    void addElementIndex(int) -> a
    java.util.List elementIndexes() -> a
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkControlElement -> org.geometerplus.zlibrary.b.c.l:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> g
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkRegionSoul -> org.geometerplus.zlibrary.b.c.m:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> a
org.geometerplus.zlibrary.text.view.ZLTextImageElement -> org.geometerplus.zlibrary.b.c.n:
    org.geometerplus.zlibrary.core.image.ZLImageData ImageData -> a
    java.lang.String URL -> b
    boolean IsCover -> g
org.geometerplus.zlibrary.text.view.ZLTextImageRegionSoul -> org.geometerplus.zlibrary.b.c.o:
    org.geometerplus.zlibrary.text.view.ZLTextImageElement ImageElement -> a
org.geometerplus.zlibrary.text.view.ZLTextLineInfo -> org.geometerplus.zlibrary.b.c.p:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor ParagraphCursor -> a
    int ParagraphCursorLength -> b
    int StartElementIndex -> c
    int StartCharIndex -> d
    int RealStartElementIndex -> e
    int RealStartCharIndex -> f
    int EndElementIndex -> g
    int EndCharIndex -> h
    boolean IsVisible -> i
    int LeftIndent -> j
    int Width -> k
    int Height -> l
    int Descent -> m
    int VSpaceAfter -> n
    int SpaceCounter -> o
    org.geometerplus.zlibrary.text.view.ZLTextStyle StartStyle -> p
    boolean isEndOfParagraph() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPage -> org.geometerplus.zlibrary.b.c.q:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartCursor -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor EndCursor -> b
    java.util.ArrayList LineInfos -> c
    int PaintState -> d
    org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector TextElementMap -> e
    int OldWidth -> f
    int OldHeight -> g
    void reset() -> a
    boolean isEmptyPage() -> b
    void findLineFromStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
    void findLineFromEnd(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> b
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor -> org.geometerplus.zlibrary.b.c.r:
    int Index -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
    java.util.ArrayList myElements -> c
    char[] SPACE_ARRAY -> d
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor cursor(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void fill() -> a
    void clear() -> b
    boolean isFirst() -> c
    boolean isLast() -> d
    boolean isEndOfSection() -> e
    int getParagraphLength() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor previous() -> g
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor next() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(int) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor$Processor -> org.geometerplus.zlibrary.b.c.s:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph myParagraph -> a
    org.vimgadgets.linebreak.LineBreaker myLineBreaker -> b
    java.util.ArrayList myElements -> c
    int myOffset -> d
    int myFirstMark -> e
    int myLastMark -> f
    java.util.List myMarks -> g
    byte[] ourBreaks -> h
    void fill() -> a
    void addWord(char[],int,int,int,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache -> org.geometerplus.zlibrary.b.c.t:
    java.util.HashMap ourMap -> a
    void put(org.geometerplus.zlibrary.text.model.ZLTextModel,int,org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor get(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void clear() -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache$Key -> org.geometerplus.zlibrary.b.c.u:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> a
    int myIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPosition -> org.geometerplus.zlibrary.b.c.v:
    int getParagraphIndex() -> h
    int getElementIndex() -> i
    int getCharIndex() -> j
    boolean samePositionAs(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextRegion -> org.geometerplus.zlibrary.b.c.w:
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter AnyRegionFilter -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter HyperlinkFilter -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter ImageOrHyperlinkFilter -> c
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySoul -> d
    java.util.List myAreaList -> e
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] myAreas -> f
    int myFromIndex -> g
    int myToIndex -> h
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull myHull -> i
    void extend() -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul getSoul() -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea[] textAreas() -> g
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull convexHull() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getFirstArea() -> c
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getLastArea() -> d
    int getTop() -> e
    int getBottom() -> f
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    int distanceTo(int,int) -> a
    boolean isAtRightOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean isAtLeftOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> b
    boolean isUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> c
    boolean isOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> d
    boolean isExactlyUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> e
    boolean isExactlyOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> f
org.geometerplus.zlibrary.text.view.ZLTextRegion$1 -> org.geometerplus.zlibrary.b.c.x:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$2 -> org.geometerplus.zlibrary.b.c.y:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$3 -> org.geometerplus.zlibrary.b.c.z:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter -> org.geometerplus.zlibrary.b.c.A:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul -> org.geometerplus.zlibrary.b.c.B:
    int ParagraphIndex -> b
    int StartElementIndex -> c
    int EndElementIndex -> d
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> b
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextSelection -> org.geometerplus.zlibrary.b.c.C:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myLeftMostRegionSoul -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul myRightMostRegionSoul -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor myCursorInMovement -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point myCursorInMovementPoint -> e
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller myScroller -> f
    boolean isEmpty() -> a
    boolean clear() -> b
    void setCursorInMovement(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getCursorInMovement() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getCursorInMovementPoint() -> d
    boolean start(int,int) -> a
    void stop() -> e
    void expandTo(int,int) -> b
    boolean isAreaSelected(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStartPosition() -> f
    org.geometerplus.zlibrary.text.view.ZLTextPosition getEndPosition() -> g
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getStartArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    org.geometerplus.zlibrary.text.view.ZLTextElementArea getEndArea(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    boolean hasAPartBeforePage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> c
    boolean hasAPartAfterPage(org.geometerplus.zlibrary.text.view.ZLTextPage) -> d
    org.geometerplus.zlibrary.text.view.ZLTextView access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelection$Point -> org.geometerplus.zlibrary.b.c.D:
    int X -> a
    int Y -> b
org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller -> org.geometerplus.zlibrary.b.c.E:
    boolean myScrollForward -> a
    int myX -> b
    int myY -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelection this$0 -> d
    boolean scrollsForward() -> a
    void setXY(int,int) -> a
    void run() -> run
    void access$0(org.geometerplus.zlibrary.text.view.ZLTextSelection$Scroller) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor -> org.geometerplus.zlibrary.b.c.F:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor None -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Left -> b
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor Right -> c
    int ourHeight -> d
    int ourWidth -> e
    int ourAccent -> f
    void init() -> d
    int getHeight() -> a
    int getWidth() -> b
    int getAccent() -> c
org.geometerplus.zlibrary.text.view.ZLTextStyle -> org.geometerplus.zlibrary.b.c.G:
    org.geometerplus.zlibrary.text.view.ZLTextStyle Base -> a
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> b
    java.lang.String getFontFamily() -> a
    int getFontSize(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> a
    boolean isBold() -> b
    boolean isItalic() -> c
    boolean isUnderline() -> d
    boolean isStrikeThrough() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.ZLTextStyleElement -> org.geometerplus.zlibrary.b.c.H:
    org.geometerplus.zlibrary.text.model.ZLTextStyleEntry Entry -> a
org.geometerplus.zlibrary.text.view.ZLTextTraverser -> org.geometerplus.zlibrary.b.c.I:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    void processWord(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void processSpace() -> a
    void processEndOfParagraph() -> b
    void traverse(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
org.geometerplus.zlibrary.text.view.ZLTextView -> org.geometerplus.zlibrary.b.c.J:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> d
    int myScrollingMode -> e
    int myOverlappingValue -> f
    org.geometerplus.zlibrary.text.view.ZLTextPage myPreviousPage -> g
    org.geometerplus.zlibrary.text.view.ZLTextPage myCurrentPage -> c
    org.geometerplus.zlibrary.text.view.ZLTextPage myNextPage -> h
    java.util.HashMap myLineInfoCache -> i
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Soul mySelectedRegionSoul -> j
    boolean myHighlightSelectedRegion -> k
    org.geometerplus.zlibrary.text.view.ZLTextSelection mySelection -> l
    org.geometerplus.zlibrary.text.view.ZLTextHighlighting myHighlighting -> m
    char[] ourDefaultLetters -> n
    char[] myLettersBuffer -> o
    int myLettersBufferLength -> p
    org.geometerplus.zlibrary.text.model.ZLTextModel myLettersModel -> q
    float myCharWidth -> r
    char[] SPACE -> s
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> t
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getModel() -> s
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getStartCursor() -> t
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getEndCursor() -> u
    void gotoMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    int search$299caf72(java.lang.String,boolean,boolean,boolean) -> a
    boolean canFindNext() -> v
    void findNext() -> w
    boolean canFindPrevious() -> x
    void findPrevious() -> y
    void clearFindResults() -> z
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void highlight(org.geometerplus.zlibrary.text.view.ZLTextPosition,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void clearHighlighting() -> A
    void moveSelectionCursorTo(org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor,int,int) -> a
    void releaseSelectionCursor() -> l
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor getSelectionCursorInMovement() -> B
    org.geometerplus.zlibrary.text.view.ZLTextSelection$Point getSelectionCursorPoint(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor) -> a
    int distanceToCursor(int,int,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int) -> j
    org.geometerplus.zlibrary.text.view.ZLTextSelectionCursor findSelectionCursor(int,int,int) -> a
    void drawSelectionCursor(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.text.view.ZLTextSelection$Point) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    int scrollbarType() -> n
    boolean isScrollbarShown() -> q
    int sizeOfTextBeforeParagraph(int) -> a
    int sizeOfFullText() -> C
    int getCurrentCharNumber(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,boolean) -> a
    int getScrollbarFullSize() -> r
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    int sizeOfTextBeforeCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    float computeCharsPerPage() -> m
    int computeTextPageNumber(int) -> c
    org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition pagePosition() -> D
    void gotoPage(int) -> b
    void gotoHome() -> E
    void drawBackgroung(org.geometerplus.zlibrary.text.view.ZLTextAbstractHighlighting,org.geometerplus.zlibrary.core.util.ZLColor,org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int,int,int) -> a
    void buildInfos(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextWordCursor,org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextLineInfo processTextLine(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int,int) -> a
    void scrollPage(boolean,int,int) -> a
    void gotoPosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void gotoPosition(int,int,int) -> b
    void gotoPositionByEnd(int,int,int) -> c
    void preparePaintInfo() -> F
    void preparePaintInfo(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    void clearCaches() -> G
    void rebuildPaintInfo() -> Y
    int infoSize(org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int) -> a
    int paragraphSize(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,boolean,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor findStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> a
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    void hideSelectedRegionBorder() -> H
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion() -> I
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion(int,int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    void selectRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean initSelection(int,int) -> k
    void clearSelection() -> J
    int getSelectionStartY() -> K
    int getSelectionEndY() -> L
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionStartPosition() -> M
    org.geometerplus.zlibrary.text.view.ZLTextPosition getSelectionEndPosition() -> N
    boolean isSelectionEmpty() -> O
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> Z
org.geometerplus.zlibrary.text.view.ZLTextView$PagePosition -> org.geometerplus.zlibrary.b.c.K:
    int Current -> a
    int Total -> b
org.geometerplus.zlibrary.text.view.ZLTextViewBase -> org.geometerplus.zlibrary.b.c.L:
    org.geometerplus.zlibrary.text.view.ZLTextStyle myTextStyle -> c
    int myWordHeight -> d
    org.geometerplus.zlibrary.text.model.ZLTextMetrics myMetrics -> e
    char[] myWordPartArray -> f
    void resetMetrics() -> P
    int getWordHeight() -> Q
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode getWallpaperMode() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> i
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedForegroundColor() -> j
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> k
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size getTextAreaSize() -> R
    int getTextAreaHeight() -> S
    int getTextAreaWidth() -> T
    int getBottomLine() -> U
    int getRightLine() -> V
    org.geometerplus.zlibrary.text.view.ZLTextStyle getTextStyle() -> W
    void setTextStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle) -> a
    void resetTextStyle() -> X
    boolean isStyleChangeElement(org.geometerplus.zlibrary.text.view.ZLTextElement) -> a
    void applyStyleChangeElement(org.geometerplus.zlibrary.text.view.ZLTextElement) -> b
    void applyStyleChanges(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int) -> a
    int getElementWidth(org.geometerplus.zlibrary.text.view.ZLTextElement,int) -> a
    int getElementHeight(org.geometerplus.zlibrary.text.view.ZLTextElement) -> c
    int getElementDescent(org.geometerplus.zlibrary.text.view.ZLTextElement) -> d
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int) -> a
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean) -> a
    void drawWord(int,int,org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean,org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void drawString(int,int,char[],int,int,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextWord -> org.geometerplus.zlibrary.b.c.M:
    char[] Data -> a
    int Offset -> b
    int Length -> g
    int myWidth -> h
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myMark -> i
    int myParagraphOffset -> j
    boolean isASpace() -> a
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getMark() -> b
    int getParagraphOffset() -> c
    void addMark(int,int) -> a
    int getWidth(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWord$Mark -> org.geometerplus.zlibrary.b.c.N:
    int Start -> a
    int Length -> b
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myNext -> c
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getNext() -> a
    void access$1(org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark) -> a
org.geometerplus.zlibrary.text.view.ZLTextWordCursor -> org.geometerplus.zlibrary.b.c.O:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor myParagraphCursor -> a
    int myElementIndex -> b
    int myCharIndex -> c
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    boolean isNull() -> a
    boolean isStartOfParagraph() -> b
    boolean isStartOfText() -> c
    boolean isEndOfParagraph() -> d
    boolean isEndOfText() -> e
    int getParagraphIndex() -> h
    int getElementIndex() -> i
    int getCharIndex() -> j
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor getParagraphCursor() -> g
    org.geometerplus.zlibrary.text.model.ZLTextMark getMark() -> k
    void nextWord() -> l
    boolean nextParagraph() -> m
    boolean previousParagraph() -> n
    void moveToParagraphStart() -> o
    void moveToParagraphEnd() -> p
    void moveToParagraph(int) -> a
    void moveTo(int,int) -> a
    void reset() -> q
    void rebuild() -> r
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWordRegionSoul -> org.geometerplus.zlibrary.b.c.P:
    org.geometerplus.zlibrary.text.view.ZLTextWord Word -> a
org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle -> org.geometerplus.zlibrary.b.c.a.a:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoHyphenationOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption BoldOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ItalicOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UnderlineOption -> j
    org.geometerplus.zlibrary.core.options.ZLBooleanOption StrikeThroughOption -> k
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LineSpaceOption -> g
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeOption -> i
    java.lang.String getFontFamily() -> a
    int getFontSize(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> a
    boolean isBold() -> b
    boolean isItalic() -> c
    boolean isUnderline() -> d
    boolean isStrikeThrough() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.b:
    java.lang.String myFontFamily -> c
    boolean myIsItalic -> d
    boolean myIsBold -> e
    boolean myIsUnderline -> f
    boolean myIsStrikeThrough -> g
    int myVerticalShift -> h
    boolean myIsNotCached -> i
    int myFontSize -> j
    org.geometerplus.zlibrary.text.model.ZLTextMetrics myMetrics -> k
    void initCache() -> u
    java.lang.String getFontFamily() -> a
    java.lang.String getFontFamilyInternal() -> o
    int getFontSize(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> a
    int getFontSizeInternal(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> b
    boolean isItalic() -> c
    boolean isItalicInternal() -> p
    boolean isBold() -> b
    boolean isBoldInternal() -> q
    boolean isUnderline() -> d
    boolean isUnderlineInternal() -> r
    boolean isStrikeThrough() -> e
    boolean isStrikeThroughInternal() -> s
    int getVerticalShift() -> j
    int getVerticalShiftInternal() -> t
org.geometerplus.zlibrary.text.view.style.ZLTextExplicitlyDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.c:
    org.geometerplus.zlibrary.text.model.ZLTextStyleEntry myEntry -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    java.lang.String getFontFamily() -> a
    int getFontSize(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> a
    boolean isBold() -> b
    boolean isItalic() -> c
    boolean isUnderline() -> d
    boolean isStrikeThrough() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> o
org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration -> org.geometerplus.zlibrary.b.c.a.d:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceBeforeOption -> a
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceAfterOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftIndentOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightIndentOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FirstLineIndentDeltaOption -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerOption LineSpacePercentOption -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextFullyDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.e:
    org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration myFullDecoration -> c
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextPartiallyDecoratedStyle -> org.geometerplus.zlibrary.b.c.a.f:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration myDecoration -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    java.lang.String getFontFamilyInternal() -> o
    int getFontSizeInternal(org.geometerplus.zlibrary.text.model.ZLTextMetrics) -> b
    boolean isBoldInternal() -> q
    boolean isItalicInternal() -> p
    boolean isUnderlineInternal() -> r
    boolean isStrikeThroughInternal() -> s
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShiftInternal() -> t
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> u
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection -> org.geometerplus.zlibrary.b.c.a.g:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection ourInstance -> a
    int myDefaultFontSize -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle myBaseStyle -> c
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] myDecorationMap -> d
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection Instance() -> a
    int getDefaultFontSize() -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle getBaseStyle() -> c
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration getDecoration(byte) -> a
    void access$0(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection,int) -> a
    int access$1(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection) -> a
    void access$2(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection,org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle) -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] access$3(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection) -> b
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection$TextStyleReader -> org.geometerplus.zlibrary.b.c.a.h:
    int myDpi -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection myCollection -> b
    boolean dontCacheAttributeValues() -> a
    int intValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,int) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 b3Value(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration -> org.geometerplus.zlibrary.b.c.a.i:
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeDeltaOption -> i
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option BoldOption -> j
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option ItalicOption -> k
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option UnderlineOption -> l
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option StrikeThroughOption -> m
    org.geometerplus.zlibrary.core.options.ZLIntegerOption VerticalShiftOption -> n
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option AllowHyphenationsOption -> o
    java.lang.String myName -> a
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    java.lang.String getName() -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow -> org.geometerplus.zlibrary.ui.android.a.a:
    java.util.HashMap myMenuItemMap -> a
    android.view.MenuItem$OnMenuItemClickListener myMenuListener -> b
    int myBatteryLevel -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> d
    void addSubMenuBookmark$41621120(android.view.Menu) -> a
    void addMenuItem$c2d62f(android.view.Menu,java.lang.String,int) -> a
    void refresh() -> b
    void runWithMessage(java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void processException(java.lang.Exception) -> a
    void setTitle(java.lang.String) -> a
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void close() -> d
    int getBatteryLevel() -> e
    void setBatteryLevel(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> f
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$1 -> org.geometerplus.zlibrary.ui.android.a.b:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$2 -> org.geometerplus.zlibrary.ui.android.a.c:
    android.app.Activity val$activity -> a
    java.lang.String val$title -> b
    void run() -> run
org.geometerplus.zlibrary.ui.android.error.BugReportActivity -> org.geometerplus.zlibrary.ui.android.b.a:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.zlibrary.ui.android.error.BugReportActivity$1 -> org.geometerplus.zlibrary.ui.android.b.b:
    org.geometerplus.zlibrary.ui.android.error.BugReportActivity this$0 -> a
    java.lang.StringBuilder val$reportText -> b
    java.lang.String val$versionName -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.error.BugReportActivity$2 -> org.geometerplus.zlibrary.ui.android.b.c:
    org.geometerplus.zlibrary.ui.android.error.BugReportActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.error.ErrorUtil -> org.geometerplus.zlibrary.ui.android.b.d:
    android.content.Context myContext -> a
    java.lang.String getVersionName() -> a
org.geometerplus.zlibrary.ui.android.image.InputStreamImageData -> org.geometerplus.zlibrary.ui.android.c.a:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData -> org.geometerplus.zlibrary.ui.android.c.b:
    android.graphics.Bitmap myBitmap -> a
    int myRealWidth -> b
    int myRealHeight -> c
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size myLastRequestedSize -> d
    org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType myLastRequestedScaling -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$ScalingType -> f
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$ScalingType() -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader -> org.geometerplus.zlibrary.ui.android.c.c:
    java.util.concurrent.ExecutorService myPool -> a
    java.util.concurrent.ExecutorService mySinglePool -> b
    java.util.HashMap myOnImageSyncRunnables -> c
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler myImageSynchronizedHandler -> d
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler access$1(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> b
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$1 -> org.geometerplus.zlibrary.ui.android.c.d:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$image -> b
    void run() -> run
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler -> org.geometerplus.zlibrary.ui.android.c.e:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    void fireMessage(java.lang.String) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$MinPriorityThreadFactory -> org.geometerplus.zlibrary.ui.android.c.f:
    java.util.concurrent.ThreadFactory myDefaultThreadFactory -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager -> org.geometerplus.zlibrary.ui.android.c.g:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader myLoader -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> b
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.zlibrary.ui.android.library.UncaughtExceptionHandler -> org.geometerplus.zlibrary.ui.android.d.a:
    android.content.Context myContext -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity -> org.geometerplus.zlibrary.ui.android.d.b:
    android.os.PowerManager$WakeLock myWakeLock -> a
    boolean myWakeLockToCreate -> b
    boolean myStartTimer -> c
    android.content.BroadcastReceiver myBatteryInfoReceiver -> d
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication() -> f
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> g
    void setButtonLight(boolean) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.Runnable getPostponedInitAction() -> a
    void createWakeLock() -> h
    void switchWakeLock(boolean) -> b
    void onResume() -> onResume
    void onPause() -> onPause
    void onLowMemory() -> onLowMemory
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary access$0() -> i
    void access$1(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity,boolean) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity$1 -> org.geometerplus.zlibrary.ui.android.d.c:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity$2 -> org.geometerplus.zlibrary.ui.android.d.d:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity this$0 -> a
    void run() -> run
org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication -> org.geometerplus.zlibrary.ui.android.d.e:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow myMainWindow -> a
    void onCreate() -> onCreate
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary -> org.geometerplus.zlibrary.ui.android.d.f:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BatteryLevelToTurnScreenOffOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScreenBrightnessLevelOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DisableButtonLightsOption -> e
    java.lang.Boolean myIsKindleFire -> f
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity myActivity -> g
    android.app.Application myApplication -> h
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> i
    android.util.DisplayMetrics myMetrics -> j
    boolean isKindleFire() -> j
    void setActivity(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity) -> a
    void finish() -> k
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity getActivity() -> l
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget getWidget() -> m
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getFullVersionName() -> n
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    int getPixelWidth() -> f
    int getPixelHeight() -> g
    java.util.Collection defaultLanguageCodes() -> h
    boolean supportsAllOrientations() -> i
    android.app.Application access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile -> org.geometerplus.zlibrary.ui.android.d.g:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile myParent -> a
    long mySize -> b
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary this$0 -> d
    java.util.List directoryEntries() -> n
    boolean isDirectory() -> a
    boolean exists() -> h
    long size() -> g
    long sizeInternal() -> q
    long sizeSlow() -> r
    java.io.InputStream getInputStream() -> i
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> d
org.geometerplus.zlibrary.ui.android.network.SQLiteCookieDatabase -> org.geometerplus.zlibrary.ui.android.e.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertStatement -> b
    android.database.sqlite.SQLiteStatement myInsertPortsStatement -> c
    android.database.sqlite.SQLiteStatement myDeletePortsStatement -> d
    void init(android.content.Context) -> a
    void removeObsolete(java.util.Date) -> a
    void removeAll() -> b
    void saveCookies(java.util.List) -> a
    java.util.List loadCookies() -> c
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil -> org.geometerplus.zlibrary.ui.android.view.a:
    java.lang.reflect.Method ourFontCreationMethod -> a
    java.util.Map ourFontMap -> b
    java.util.Set ourFileSet -> c
    long ourTimeStamp -> d
    java.util.HashMap ourTypefaces -> e
    boolean areExternalFontsSupported() -> a
    android.graphics.Typeface createFontFromFile(java.io.File) -> a
    java.util.Map getFontMap(boolean) -> a
    java.lang.String realFontFamilyName(java.lang.String) -> a
    void fillFamiliesList(java.util.ArrayList) -> a
    android.graphics.Typeface typeface(java.lang.String,boolean,boolean) -> a
    void clearFontCache() -> b
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil$1 -> org.geometerplus.zlibrary.ui.android.view.b:
    boolean accept(java.io.File,java.lang.String) -> accept
org.geometerplus.zlibrary.ui.android.view.AnimationProvider -> org.geometerplus.zlibrary.ui.android.view.c:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode myMode -> i
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> j
    int myStartX -> a
    int myStartY -> b
    int myEndX -> c
    int myEndY -> d
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> e
    float mySpeed -> f
    int myWidth -> g
    int myHeight -> h
    java.util.List myDrawInfos -> k
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> l
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode getMode() -> a
    void terminate() -> b
    void startManualScrolling(int,int) -> a
    void scrollTo(int,int) -> b
    void startAnimatedScrolling(int,int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,java.lang.Integer,java.lang.Integer,int) -> a
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    boolean inProgress() -> c
    int getScrollingShift() -> d
    void setup(org.geometerplus.zlibrary.core.view.ZLView$Direction,int,int) -> a
    void doStep() -> e
    int getScrolledPercent() -> f
    void draw(android.graphics.Canvas) -> a
    void drawInternal(android.graphics.Canvas) -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo() -> g
    android.graphics.Bitmap getBitmapFrom() -> h
    android.graphics.Bitmap getBitmapTo() -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$DrawInfo -> org.geometerplus.zlibrary.ui.android.view.d:
    int X -> a
    int Y -> b
    long Start -> c
    int Duration -> d
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode -> org.geometerplus.zlibrary.ui.android.view.e:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode NoScrolling -> a
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode ManualScrolling -> b
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingForward -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AnimatedScrollingBackward -> d
    boolean Auto -> e
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] values() -> a
org.geometerplus.zlibrary.ui.android.view.BitmapManager -> org.geometerplus.zlibrary.ui.android.view.f:
    android.graphics.Bitmap[] myBitmaps -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] myIndexes -> b
    int myWidth -> c
    int myHeight -> d
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> e
    void setSize(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void reset() -> a
    void shift(boolean) -> a
org.geometerplus.zlibrary.ui.android.view.CurlAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.g:
    android.graphics.Paint myPaint -> i
    android.graphics.Paint myBackPaint -> j
    android.graphics.Paint myEdgePaint -> k
    android.graphics.Path myFgPath -> l
    android.graphics.Path myEdgePath -> m
    android.graphics.Path myQuadPath -> n
    float mySpeedFactor -> o
    android.graphics.Bitmap myBuffer -> p
    boolean myUseCanvasHack -> q
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> r
    void drawInternal(android.graphics.Canvas) -> b
    void drawInternalNoHack(android.graphics.Canvas) -> c
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void startAnimatedScrollingInternal(int) -> a
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.NoneAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.h:
    android.graphics.Paint myPaint -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    void drawInternal(android.graphics.Canvas) -> b
    void doStep() -> e
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.ShiftAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.i:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.SimpleAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.j:
    float mySpeedFactor -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> c
    void setupAnimatedScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAnimatedScrollingInternal(int) -> a
    void doStep() -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.SlideAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.k:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> b
org.geometerplus.zlibrary.ui.android.view.ZLAndroidPaintContext -> org.geometerplus.zlibrary.ui.android.view.l:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AntiAliasOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DeviceKerningOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DitheringOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption SubpixelOption -> d
    android.graphics.Canvas myCanvas -> e
    android.graphics.Paint myTextPaint -> f
    android.graphics.Paint myLinePaint -> g
    android.graphics.Paint myFillPaint -> h
    android.graphics.Paint myOutlinePaint -> i
    int myWidth -> j
    int myHeight -> k
    int myScrollbarWidth -> l
    org.geometerplus.zlibrary.core.util.ZLColor myBackgroundColor -> m
    org.geometerplus.zlibrary.core.filesystem.ZLFile ourWallpaperFile -> n
    android.graphics.Bitmap ourWallpaper -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$WallpaperMode -> p
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.zlibrary.core.view.ZLPaintContext$WallpaperMode) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> a
    void fillPolygon(int[],int[]) -> a
    void drawPolygonalLine(int[],int[]) -> b
    void drawOutline(int[],int[]) -> c
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setFillColor(org.geometerplus.zlibrary.core.util.ZLColor,int) -> a
    int getWidth() -> b
    int getHeight() -> c
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> d
    int getStringHeightInternal() -> e
    int getDescentInternal() -> f
    void drawString(int,int,char[],int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLPaintContext$Size imageSize(org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData,org.geometerplus.zlibrary.core.view.ZLPaintContext$Size,org.geometerplus.zlibrary.core.view.ZLPaintContext$ScalingType) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLPaintContext$WallpaperMode() -> j
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget -> org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget:
    android.graphics.Paint myPaint -> a
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> b
    android.graphics.Bitmap myFooterBitmap -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider myAnimationProvider -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation myAnimationType -> e
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable myPendingLongClickRunnable -> f
    boolean myLongClickPerformed -> g
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable myPendingShortClickRunnable -> h
    boolean myPendingPress -> i
    boolean myPendingDoubleTap -> j
    int myPressedX -> k
    int myPressedY -> l
    boolean myScreenIsTouched -> m
    int myKeyUnderTracking -> n
    long myTrackingStartTime -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation -> p
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode -> q
    void init() -> c
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider getAnimationProvider() -> d
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAnimatedScrolling(int,int,int) -> a
    void drawOnBitmap(android.graphics.Bitmap,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void drawFooter(android.graphics.Canvas) -> a
    void onDrawStatic(android.graphics.Canvas) -> b
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int getMainAreaHeight() -> e
    void access$0(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,boolean) -> a
    int access$1(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> a
    int access$2(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> b
    void access$3(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,boolean) -> b
    void access$4(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget,org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation() -> f
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode() -> g
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable -> org.geometerplus.zlibrary.ui.android.view.m:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable -> org.geometerplus.zlibrary.ui.android.view.n:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.vimgadgets.linebreak.LineBreaker -> org.b.a.a:
    java.lang.String myLanguage -> a
    void init() -> a
    void setLineBreaksForCharArray(char[],int,int,java.lang.String,byte[]) -> a
    void setLineBreaks(char[],int,int,byte[]) -> a
